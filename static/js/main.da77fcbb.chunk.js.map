{"version":3,"sources":["theme.js","logo.png","app-header/Header.tsx","app-main/Main.tsx","app-footer/Footer.tsx","app-plantala/Plantala.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["theme","createMuiTheme","palette","primary","main","background","default","paper","useStyles","makeStyles","icon","marginRight","spacing","height","width","Header","classes","className","AppBar","position","Toolbar","src","logo","alt","Typography","variant","heroContent","backgroundColor","padding","landing","paddingTop","Main","plants","storedNavigationValue","Container","maxWidth","align","color","gutterBottom","Grid","container","justify","item","md","Button","fullWidth","createStyles","footer","avatar","Footer","selectedPlants","avatars","slice","map","plant","Avatar","name","process","source","AvatarGroup","max","Plantala","state","render","Component","App","ThemeProvider","CssBaseline","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0NAEaA,EAAQC,YAAe,CAClCC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,WAAY,CACVC,QAAS,UACTC,MAAO,c,wDCTE,MAA0B,iCCKnCC,EAAYC,aAAW,SAACT,GAAD,MAAY,CACvCU,KAAM,CACJC,YAAaX,EAAMY,QAAQ,GAC3BC,OAAQb,EAAMY,QAAQ,GACtBE,MAAOd,EAAMY,QAAQ,QAIV,SAASG,IACtB,IAAMC,EAAUR,IAEhB,OACE,qBAAKS,UAAU,aAAf,SACE,cAACC,EAAA,EAAD,CAAQC,SAAS,WAAjB,SACE,eAACC,EAAA,EAAD,WACE,qBAAKC,IAAKC,EAAML,UAAWD,EAAQN,KAAMa,IAAI,kBAC7C,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,6B,4BCVJjB,G,MAAYC,aAAW,SAACT,GAAD,MAAY,CACvC0B,YAAa,CACXC,gBAAiB3B,EAAME,QAAQG,WAAWC,QAC1CsB,QAAS5B,EAAMY,QAAQ,IAEzBiB,QAAS,CACPC,WAAY9B,EAAMY,QAAQ,SAIf,SAASmB,EAAT,GAA2D,EAA5CC,OAA6C,IAArCC,EAAoC,EAApCA,sBAC9BjB,EAAUR,IAEhB,OACE,iCACE,eAAC0B,EAAA,EAAD,CAAWC,SAAS,KAAKlB,UAAWD,EAAQU,YAA5C,UACE,cAACF,EAAA,EAAD,CAAYC,QAAQ,KAAKW,MAAM,SAASC,MAAM,cAAcC,cAAY,EAAxE,oCAGA,8BACE,cAACC,EAAA,EAAD,CAAMC,WAAS,EAAC5B,QAAS,EAAG6B,QAAQ,SAApC,SACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,cAACC,EAAA,EAAD,CAAQnB,QAAQ,YAAYY,MAAM,UAAUQ,WAAS,EAArD,SACGZ,aAWX,cAACC,EAAA,EAAD,CAAWjB,UAAWD,EAAQa,QAASM,SAAS,KAAhD,SACE,cAACI,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAxB,SACE,qBAAKpB,IAAKC,EAAML,UAAU,cAAcM,IAAI,oB,4BCjChDf,EAAYC,aAAW,SAACT,GAAD,OAC3B8C,YAAa,CACXC,OAAQ,CACNpB,gBAAiB3B,EAAME,QAAQG,WAAWE,MAC1CqB,QAAS5B,EAAMY,QAAQ,IAEzBoC,OAAQ,CACNlC,MAAOd,EAAMY,QAAQ,GACrBC,OAAQb,EAAMY,QAAQ,SAKb,SAASqC,EAAT,GAAiD,IAAhCC,EAA+B,EAA/BA,eACxBlC,EAAUR,IAEV2C,EAAUD,EAAeE,MAAM,EADjB,GACiCC,KAAI,SAAAC,GAAK,OAC5D,cAACC,EAAA,EAAD,CAEEhC,IAAK+B,EAAME,KACXnC,IAAG,UAAKoC,YAAL,YAA+BH,EAAMI,QACxCzC,UAAWD,EAAQgC,QAHdM,EAAME,SAKf,OACE,wBAAQvC,UAAWD,EAAQ+B,OAA3B,SACE,cAACR,EAAA,EAAD,CAAMC,WAAS,EAAC5B,QAAS,EAAG6B,QAAQ,SAApC,SACE,cAACkB,EAAA,EAAD,CAAaC,IAAK,EAAlB,SACGT,Q,UCSIU,E,4MAhCbC,MAAwB,CAEtB9B,OAAQ,GAERkB,eAAgB,CACd,CAACM,KAAM,IAAKE,OAAQ,SACpB,CAACF,KAAM,IAAKE,OAAQ,SACpB,CAACF,KAAM,IAAKE,OAAQ,SACpB,CAACF,KAAM,IAAKE,OAAQ,SACpB,CAACF,KAAM,IAAKE,OAAQ,UAGtBzB,sBAAuB,S,EAGzB8B,OAAS,WAAM,MAE6C,EAAKD,MAAvD9B,EAFK,EAELA,OAAQkB,EAFH,EAEGA,eAAgBjB,EAFnB,EAEmBA,sBAEhC,OACE,sBAAKhB,UAAU,WAAf,UACE,cAACF,EAAD,IACA,cAAC,EAAD,CACEiB,OAAQA,EACRC,sBAAuBA,IACzB,cAACgB,EAAD,CACEC,eAAgBA,Q,YA3BHc,aCLRC,EANH,kBACV,eAACC,EAAA,EAAD,CAAelE,MAAOA,EAAtB,UACE,cAACmE,EAAA,EAAD,IACA,cAAC,EAAD,QCGgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCfnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASnB,OACP,cAAC,IAAMoB,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SF0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBZ,MAAK,SAACa,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YErH5BrB,M","file":"static/js/main.da77fcbb.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles'\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#0082A2',\n    },\n    background: {\n      default: '#FF7D5D',\n      paper: '#0082A2',\n    }\n  },\n});\n\nexport default theme;","export default __webpack_public_path__ + \"static/media/logo.b2544800.png\";","import React from 'react';\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport logo from '../logo.png';\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    marginRight: theme.spacing(2),\n    height: theme.spacing(8),\n    width: theme.spacing(8)\n  }\n}));\n\nexport default function Header() {\n  const classes = useStyles();\n\n  return (\n    <div className=\"app-header\">\n      <AppBar position=\"relative\">\n        <Toolbar>\n          <img src={logo} className={classes.icon} alt=\"Plantala logo\" />\n          <Typography variant=\"h2\">\n            Plantala\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n};","import React from 'react';\nimport { Button, Container, Grid, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport logo from '../logo.png';\nimport './Main.css';\n\ninterface IMainProps {\n  plants: [],\n  storedNavigationValue: string\n}\n\nconst useStyles = makeStyles((theme) => ({\n  heroContent: {\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(2),\n  },\n  landing: {\n    paddingTop: theme.spacing(4),\n  },\n}));\n\nexport default function Main({plants, storedNavigationValue}: IMainProps) {\n  const classes = useStyles();\n\n  return (\n    <main>\n      <Container maxWidth=\"md\" className={classes.heroContent}>\n        <Typography variant=\"h4\" align=\"center\" color=\"textPrimary\" gutterBottom>\n        Erstelle dein Mandala!\n        </Typography>\n        <div>\n          <Grid container spacing={2} justify=\"center\">\n            <Grid item md={3}>\n              <Button variant=\"contained\" color=\"primary\" fullWidth>\n                {storedNavigationValue}\n              </Button>\n            </Grid>\n            {/* <Grid item xs={3}>\n              <Button variant=\"outlined\" color=\"primary\" fullWidth>\n                Optional\n              </Button>\n            </Grid> */}\n          </Grid>\n        </div>\n      </Container>\n      <Container className={classes.landing} maxWidth=\"xs\">\n        <Grid container justify=\"center\">\n          <img src={logo} className=\"app-landing\" alt=\"Plantala\" />\n        </Grid>\n      </Container>\n    </main>\n  );\n}","import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Avatar, Grid } from '@material-ui/core';\nimport AvatarGroup from '@material-ui/lab/AvatarGroup';\n\ninterface IPlant {\n  name: string,\n  source: string\n}\n\ninterface IFooterProps {\n  selectedPlants: IPlant[]\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    footer: {\n      backgroundColor: theme.palette.background.paper,\n      padding: theme.spacing(4),\n    },\n    avatar: {\n      width: theme.spacing(8),\n      height: theme.spacing(8),\n    },\n  }),\n);\n\nexport default function Footer({selectedPlants}: IFooterProps) {\n  const classes = useStyles();\n  const avatarCount = 5;\n  const avatars = selectedPlants.slice(0, avatarCount).map(plant =>\n    <Avatar\n      key={plant.name}\n      alt={plant.name}\n      src={`${process.env.PUBLIC_URL}/${plant.source}`}\n      className={classes.avatar} />);\n\n  return (\n    <footer className={classes.footer}>\n      <Grid container spacing={2} justify=\"center\">\n        <AvatarGroup max={5}>\n          {avatars}\n        </AvatarGroup>\n      </Grid>\n    </footer>\n  );\n}\n","import React, { Component } from 'react';\nimport Header from '../app-header/Header';\nimport Main from '../app-main/Main';\nimport Footer from '../app-footer/Footer';\nimport './Plantala.css';\n\ninterface IPlant {\n  name: string,\n  source: string\n}\n\ninterface IPlantalaState {\n  plants: [],\n  selectedPlants: IPlant[],\n  storedNavigationValue: string,\n}\n\nclass Plantala extends Component {\n  state: IPlantalaState = {\n    // values to be displayed in <Card />\n    plants: [],\n    // plants selected for <Plant />\n    selectedPlants: [\n      {name: '1', source: '1.png'},\n      {name: '2', source: '2.png'},\n      {name: '3', source: '3.png'},\n      {name: '4', source: '4.png'},\n      {name: '5', source: '5.png'}\n    ],\n    // stored value to use for math operation\n    storedNavigationValue: 'Start',\n  }\n\n  render = () => {\n    // unpack the component state by using Object Destructuring\n    const { plants, selectedPlants, storedNavigationValue } = this.state;\n\n    return (\n      <div className=\"plantala\">\n        <Header />\n        <Main\n          plants={plants}\n          storedNavigationValue={storedNavigationValue}/>\n        <Footer\n          selectedPlants={selectedPlants} />\n      </div>\n    );\n  }\n}\n\nexport default Plantala;\n","import React from 'react';\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { theme } from './theme';\nimport Plantala from './app-plantala/Plantala';\n\nconst App = () =>  \n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <Plantala />\n  </ThemeProvider>\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}