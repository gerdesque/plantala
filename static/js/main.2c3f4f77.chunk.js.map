{"version":3,"sources":["assets/fonts/Proletarsk.ttf","theme.js","assets/logo.webp","app-header/Header.tsx","landing/Landing.tsx","plant-list/LazyCardMedia.tsx","utils/Utils.tsx","plant-list/PlantList.tsx","mandala/useCanvas.tsx","mandala/Mandala.tsx","app-main/Main.tsx","image/Image.tsx","drawer/Drawer.tsx","app-footer/Footer.tsx","app-plantala/Plantala.tsx","plantItems.js","app/App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["proletarsk","fontFamily","fontStyle","fontDisplay","fontWeight","src","Proletarsk","theme","createMuiTheme","palette","primary","light","main","secondary","typography","button","textTransform","overrides","MuiCssBaseline","MuiSlider","root","color","height","thumb","width","backgroundColor","border","marginTop","marginLeft","boxShadow","active","valueLabel","left","track","borderRadius","rail","responsiveFontSizes","useStyles","makeStyles","header","icon","marginRight","spacing","Header","classes","AppBar","position","className","Toolbar","logo","alt","Typography","variant","Landing","Grid","container","justify","LazyCardMedia","image","title","useState","isVisible","setVisible","placeholderRef","useRef","useEffect","current","IntersectionObserver","intersectionRatio","observe","CardMedia","ref","canvasWidth","canvasHeight","setImageValues","plant","amount","order","rotation","scale","size","distance","getLayerDistance","step","Math","ceil","orderSelectedPlant","plantOrder","selected","reorderSelectedPlant","isSelected","display","flexDirection","textAlign","borderColor","borderStyle","borderWidth","cursor","plantHeader","common","black","plantMedia","paddingTop","plantAvatar","top","plantContent","PlantList","plants","setSelectedPlant","selectedPlants","isMoving","setMoving","isPlantListFull","length","fadePlant","setFadingPlant","itemClass","responsive","desktop","breakpoint","max","min","items","partialVisibilityGutter","tablet","mobile","renderDotsOutside","infinite","autoPlay","containerClass","customTransition","transitionDuration","centerMode","removeArrowOnDeviceType","beforeChange","afterChange","map","Card","onClick","setTimeout","selectCard","CardHeader","name","process","source","Avatar","description","CardContent","CardActions","Button","drawPlants","context","imageNumber","angle","PI","imageX","cos","imageY","sin","calculateImageCoordinates","imageRotation","calculateImageRotation","Image","onload","setTransform","rotate","drawImage","ButtonValue","HeaderValue","canvas","Mandala","setPlantalaData","canvasRef","setPlants","getContext","clearRect","forEach","useCanvas","toDataURL","plantalaData","heroContent","padding","Main","action","setAction","Container","maxWidth","align","gutterBottom","item","md","fullWidth","disabled","Action","Select","Start","Done","Again","createStyles","avatar","drawer","Drawer","activePlant","setActivePlant","transformPlant","isOpen","setOpen","toggleDrawer","open","event","type","key","selectedPlant","role","Box","id","Slider","aria-labelledby","valueLabelDisplay","value","onChange","_event","newValue","SwipeableDrawer","anchor","onClose","onOpen","footer","Footer","avatars","slice","AvatarGroup","plantItems","getNextAction","nextAction","next","Plantala","state","setState","filter","selectedPlantsArray","activatedPlants","activatedPlantsArray","transformedPlant","transformName","transformedPlantsArray","render","sort","a","b","Component","App","ThemeProvider","CssBaseline","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2c3f4f77.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Proletarsk.71fdaf01.ttf\";","import { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles'\nimport Proletarsk from './assets/fonts/Proletarsk.ttf';\n\nconst proletarsk = {\n  fontFamily: 'Proletarsk',\n  fontStyle: 'normal',\n  fontDisplay: 'swap',\n  fontWeight: 400,\n  src: `\n    local('Proletarsk'),\n    url(${Proletarsk}) format('truetype')\n  `,\n};\n\nexport let theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: '#D6E7E4',\n      main: '#9EC6BF',\n    },\n    secondary: {\n      main: '#992572',\n      light: '#CD58A1'\n    },\n  },\n  typography: {\n    fontFamily: 'Proletarsk, Arial',\n    button: {\n      textTransform: 'none'\n    }\n  },\n  overrides: {\n    MuiCssBaseline: {\n      '@global': {\n        '@font-face': [proletarsk],\n      },\n    },\n    MuiSlider: {\n      root: {\n        color: '#52af77',\n        height: 8,\n      },\n      thumb: {\n        height: 24,\n        width: 24,\n        backgroundColor: '#fff',\n        border: '2px solid currentColor',\n        marginTop: -8,\n        marginLeft: -12,\n        '&:focus, &:hover, &$active': {\n          boxShadow: 'inherit',\n        },\n      },\n      active: {},\n      valueLabel: {\n        left: 'calc(-50% + 4px)',\n      },\n      track: {\n        height: 8,\n        borderRadius: 4,\n      },\n      rail: {\n        height: 8,\n        borderRadius: 4,\n      },\n    },\n  },\n});\ntheme = responsiveFontSizes(theme);\n\nexport default theme;\n","export default __webpack_public_path__ + \"static/media/logo.5d8ee067.webp\";","import React from 'react';\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport logo from '../assets/logo.webp';\n\nconst useStyles = makeStyles((theme) => ({\n  header: {\n    backgroundColor: theme.palette.primary.main,\n  },\n  icon: {\n    marginRight: theme.spacing(2),\n    height: theme.spacing(8),\n    width: theme.spacing(8)\n  }\n}));\n\nexport default function Header() {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <AppBar position=\"relative\" className={classes.header}>\n        <Toolbar>\n          <img src={logo} className={classes.icon} alt=\"Plantala logo\" />\n          <Typography variant=\"h2\">\n            Plantala\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n}\n","import React from 'react';\nimport { Grid } from '@material-ui/core';\nimport logo from '../assets/logo.webp';\nimport './Landing.css';\n\nexport default function Landing() {\n  return (\n    <Grid className=\"app-landing-container\" container justify=\"center\">\n      <img src={logo} className=\"app-landing\" alt=\"Plantala\" />\n    </Grid>\n  );\n}\n","import React, {useState, useEffect, useRef} from 'react'\nimport { CardMedia } from '@material-ui/core'\n\ninterface ICardMediaProp {\n  className: string,\n  image: string,\n  title: string,\n}\n\nexport default function LazyCardMedia({ className, image, title }: ICardMediaProp) {\n  const [isVisible, setVisible] = useState<boolean>(false);\n  const placeholderRef = useRef<HTMLDivElement>(null);\n\n  /* istanbul ignore next */\n  useEffect(() => {\n    if (!isVisible && placeholderRef.current) {\n      const observer = new IntersectionObserver(([{ intersectionRatio }]) => {\n        if (intersectionRatio > 0) {\n          setVisible(true);\n        }\n      });\n      observer.observe(placeholderRef.current);\n    }\n  }, [isVisible, placeholderRef]);\n\n  return (isVisible\n    ? \n    <CardMedia\n      className={className}\n      image={image}\n      title={title}\n    />\n    : \n    <div className={className} ref={placeholderRef} />\n  );\n}\n","import { IPlant } from '../plant/Plant';\n\nexport const avatarCount = 5;\n\nexport const canvasWidth: number = 800;\nexport const canvasHeight: number = 800;\n\nexport function setImageValues(plant: IPlant) {\n  /* TODO\n    Add plant.amount from 4 - 20\n    Add plant.order\n    Add plant.rotation from 0 - 360\n    Add plant.scale from 0.1 - 2\n    Add plant.size\n  */\n  const { \n    amount = 6 + (plant.order * 2),\n    rotation = 0,\n    scale = 1,\n    size = 100,\n  } = plant;\n\n  const distance: number = getLayerDistance(plant.distance, plant.order);\n  const step: number = Math.ceil(360 / amount);\n\n  return { amount, distance, rotation, step, scale, size };\n}\n\nexport function orderSelectedPlant(plant: IPlant, plantOrder: number): IPlant {\n  return { ...plant, selected: !plant.selected, order: plantOrder };\n}\n\nexport function reorderSelectedPlant(plant: IPlant, isSelected: boolean): IPlant {\n  return isSelected && plant.selected ? { ...plant, order: plant.order === 1 ? 1 : plant.order - 1 } : plant;\n}\n\nexport function getLayerDistance(distance: number = 50, order:number) {\n  return distance * order;\n}\n\nexport function calculateImageCoordinates(imageNumber: number, amount: number, distance: number) {\n  const angle = (imageNumber / (amount / 2)) * Math.PI;\n  const imageX = distance * Math.cos(angle) + canvasWidth / 2;\n  const imageY = distance * Math.sin(angle) + canvasHeight / 2;\n\n  return { imageX, imageY };\n}\n\nexport function calculateImageRotation(imageNumber: number, rotation: number, step: number) {\n  const imageRotation = rotation + step * imageNumber * Math.PI / 180;\n\n  return { imageRotation };\n}\n\n/* istanbul ignore next */\nexport function drawCoordinateSystem (context:CanvasRenderingContext2D) {\n  for (var x = 0.5; x < canvasWidth; x += 10) {\n    context.moveTo(x, 0);\n    context.lineTo(x, canvasWidth);\n  }\n  for (var y = 0.5; y < canvasHeight; y += 10) {\n    context.moveTo(0, y);\n    context.lineTo(canvasHeight, y);\n  }\n  context.strokeStyle = \"#eee\";\n  context.stroke();\n\n  context.beginPath();\n  context.moveTo(0, canvasHeight/2);\n  context.lineTo(canvasWidth, canvasHeight/2);\n  context.moveTo(canvasWidth/2, 0);\n  context.lineTo(canvasWidth/2, canvasHeight);\n  context.strokeStyle = \"#000\";\n  context.stroke();\n}\n","import React, {useState} from 'react';\nimport { Button, Card, CardActions, CardContent, Typography, CardHeader, Avatar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Carousel from \"react-multi-carousel\";\nimport \"react-multi-carousel/lib/styles.css\";\nimport './PlantList.css';\nimport { IPlant } from '../plant/Plant';\nimport LazyCardMedia from './LazyCardMedia';\nimport { avatarCount } from '../utils/Utils';\n\ninterface IPlantListProps {\n  plants: IPlant[],\n  setSelectedPlant: any,\n  selectedPlants: IPlant[],\n}\n\nconst useStyles = makeStyles((theme) => ({\n  plant: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    textAlign: 'center',\n    borderColor: theme.palette.primary.main,\n    borderStyle: 'solid',\n    borderWidth: theme.spacing(1),\n    cursor: 'pointer'\n  },\n  selected: {\n    borderColor: theme.palette.secondary.main,\n  },\n  plantHeader: {\n    backgroundColor: theme.palette.primary.light,\n    borderColor: theme.palette.common.black,\n    borderStyle: 'solid',\n    borderWidth: theme.spacing(0.5),\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    marginTop: theme.spacing(1),\n  },\n  plantMedia: {\n    paddingTop: '100%',\n  },\n  plantAvatar: {\n    width: theme.spacing(12),\n    height: theme.spacing(12),\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    marginTop: -theme.spacing(6),\n    marginLeft: -theme.spacing(6),\n  },\n  plantContent: {\n    backgroundColor: theme.palette.primary.light,\n    borderColor: theme.palette.common.black,\n    borderStyle: 'solid',\n    borderWidth: theme.spacing(0.5),\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function PlantList({ plants, setSelectedPlant, selectedPlants }: IPlantListProps) {\n  const classes = useStyles();\n  const responsive = {\n    desktop: {\n      breakpoint: { max: 5000, min: 1024 },\n      items: 1,\n      partialVisibilityGutter: 10\n    },\n    tablet: {\n      breakpoint: { max: 1024, min: 464 },\n      items: 1\n    },\n    mobile: {\n      breakpoint: { max: 464, min: 0 },\n      items: 1\n    }\n  };\n  const [isMoving, setMoving] = useState(false);\n  const isPlantListFull = selectedPlants.length === avatarCount;\n\n  const [fadePlant, setFadingPlant] = useState({} as IPlant);\n  function selectCard(plant: IPlant):void {\n    if (plant.selected) {\n      setSelectedPlant(plant);\n    } else if (!isPlantListFull) {\n      setFadingPlant(plant);\n      setTimeout(function () {\n        setFadingPlant(plant)\n        setSelectedPlant(plant)\n      }, 500);\n    }\n  }\n\n  return (\n      <Carousel\n      itemClass=\"image-item\"\n      responsive={responsive}\n      renderDotsOutside\n      infinite={true}\n      autoPlay={false}\n      containerClass=\"carousel-container\"\n      customTransition=\"all .3s ease-in-out\"\n      transitionDuration={300}\n      centerMode={true}\n      removeArrowOnDeviceType={[\"tablet\", \"mobile\"]}\n      beforeChange={() => setMoving(true) }\n      afterChange={() => setMoving(false) }\n    >\n      {plants.map(plant => (\n        <Card \n          key={plant.name}\n          className={`${classes.plant} ${plant.selected ? classes.selected : ''}`}\n          onClick={() => {\n            if (!isMoving) {\n              selectCard(plant)\n            }\n            }}>\n          <CardHeader\n            title={plant.name}\n            className={classes.plantHeader}\n          />\n          <LazyCardMedia\n            className={classes.plantMedia}\n            image={`${process.env.PUBLIC_URL}/assets/${plant.source}`}\n            title={plant.name}\n          />\n          {fadePlant === plant && <Avatar\n            key={plant.name}\n            alt={plant.name}\n            src={`${process.env.PUBLIC_URL}/assets/${plant.source}`}\n            className={`${classes.plantAvatar} ${fadePlant === plant ? 'fade' : ''}`}\n          />}\n          {plant.description && <CardContent className={classes.plantContent}>\n            <Typography>\n              {plant.description}\n            </Typography>\n          </CardContent>}\n          <CardActions>\n            <Button size=\"small\" color=\"secondary\">\n              Mehr erfahren\n            </Button>\n          </CardActions>\n        </Card>\n      ))}\n      </Carousel>\n  );\n}\n","import { useState, useEffect, useRef } from 'react';\nimport { calculateImageCoordinates, calculateImageRotation, setImageValues, canvasHeight, canvasWidth } from '../utils/Utils';\nimport { IPlant } from '../plant/Plant';\n\n/* istanbul ignore next */\nfunction drawPlants (context:CanvasRenderingContext2D, plant:IPlant) {\n\n  const { amount, distance, rotation, step, scale, size } = setImageValues(plant);\n\n  for (let imageNumber = 0; imageNumber < amount; imageNumber ++) {\n    const { imageX, imageY } = calculateImageCoordinates(imageNumber, amount, distance);\n    const { imageRotation } = calculateImageRotation(imageNumber, rotation, step);\n  \n    const image = new Image();\n\n    image.onload = () => {\n      //console.log(`name: ${plant.name}, imageNumber: ${imageNumber}, size: ${size}, scale: ${scale}, rotation: ${rotation}, imageX: ${imageX}, imageY: ${imageY}`);\n      context.setTransform(scale, 0, 0, scale, imageX, imageY);\n      context.rotate(imageRotation);\n      context.drawImage(image, -size / 2, -size / 2, size, size);\n\n      // context.lineWidth = 2;\n      // context.strokeRect(-size / 2, -size / 2, size, size);\n    }\n\n    image.src = `${process.env.PUBLIC_URL}/assets/${plant.source}`;\n  }\n}\n\n/* istanbul ignore next */\nexport function useCanvas(){\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [plants, setPlants] = useState([] as IPlant[]);\n\n  useEffect(() => {\n    if (plants.length > 0 && canvasRef.current) {\n      const canvasObj = canvasRef.current;\n      const context = canvasObj.getContext('2d');\n      if (context) {\n        context.setTransform(1,0,0,1,0,0);\n        context.clearRect( 0,0, canvasWidth, canvasHeight );\n        //drawCoordinateSystem(context);\n\n        plants.forEach((plant) => {\n          drawPlants(context, plant);\n        });\n\n      }\n    }\n  }, [plants]);\n\n  return { setPlants, canvasRef, canvasWidth, canvasHeight };\n}\n\n","import React, {useEffect} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useCanvas } from './useCanvas';\nimport { IPlant } from '../plant/Plant';\n\ninterface IMandalaProps {\n  selectedPlants: IPlant[],\n  setPlantalaData: any\n}\n\nconst useStyles = makeStyles(() => ({\n  canvas: {\n    width: '100%',\n    height: 'auto'\n  }\n}));\n\nconst Mandala = ({ selectedPlants, setPlantalaData }: IMandalaProps) => {\n  const classes = useStyles();\n  const { setPlants, canvasRef, canvasWidth, canvasHeight } = useCanvas();\n\n  useEffect(() => {\n    setPlants(selectedPlants);\n  }, [selectedPlants, setPlants]);\n\n  return (\n    <canvas \n      ref={canvasRef}\n      className={classes.canvas}\n      width={canvasWidth}\n      height={canvasHeight}\n      onClick={() => setPlantalaData(canvasRef.current?.toDataURL())}\n    />\n  );\n};\n\nexport default Mandala;\n","import React from 'react';\nimport { Button, Container, Grid, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { IPlant } from '../plant/Plant';\nimport Landing from '../landing/Landing';\nimport PlantList from '../plant-list/PlantList';\nimport Mandala from '../mandala/Mandala';\nimport Image from '../image/Image';\nimport { Action } from '../app-plantala/Plantala';\n\nexport enum ButtonValue {\n  Start = \"Start\",\n  Select = \"Plantala erstellen\",\n  Done = \"Fertig\",\n  Again = \"Neues Plantala erstellen\"\n}\n\nexport enum HeaderValue {\n  Start = \"Erstelle dein Plantala!\",\n  Select = \"Wähle 5 Karten\",\n  Done = \"Gestalte dein Plantala\",\n  Again = \"Teile dein Plantala\"\n}\n\ninterface IMainProps {\n  plants: IPlant[],\n  selectedPlants: IPlant[],\n  action: Action,\n  setAction: any,\n  setSelectedPlant: any,\n  setPlantalaData: any\n  plantalaData: string\n}\n\nconst useStyles = makeStyles((theme) => ({\n  heroContent: {\n    padding: theme.spacing(2),\n  },\n  main: {\n    backgroundColor: theme.palette.primary.light,\n    width: 'inherit'\n  },\n}));\n\nexport default function Main({ plants, selectedPlants, action, setAction, setSelectedPlant, setPlantalaData, plantalaData }: IMainProps) {\n  const classes = useStyles();\n\n  return (\n    <main className={classes.main}>\n      <Container maxWidth=\"md\" className={classes.heroContent}>\n        <Typography variant=\"h5\" align=\"center\" color=\"textPrimary\" gutterBottom>\n          {HeaderValue[action]}\n        </Typography>\n        <div>\n          <Grid container spacing={2} justify=\"center\">\n            <Grid item md={3}>\n              <Button variant=\"contained\" color=\"secondary\" fullWidth onClick={setAction} disabled={action === Action.Select && selectedPlants.length === 0}>\n                {ButtonValue[action]}\n              </Button>\n            </Grid>\n          </Grid>\n        </div>\n      </Container>\n      <Container maxWidth=\"sm\">\n        {action === Action.Start && <Landing /> }\n        {action === Action.Select && <PlantList plants={plants} setSelectedPlant={setSelectedPlant} selectedPlants={selectedPlants} /> }\n        {action === Action.Done && <Mandala selectedPlants={selectedPlants} setPlantalaData={setPlantalaData} /> }\n        {action === Action.Again && <Image plantalaData={plantalaData} /> }\n      </Container>\n    </main>\n  );\n}\n","import React from 'react';\nimport { Grid } from '@material-ui/core';\n\ninterface IImageProps {\n  plantalaData: string\n}\n\nexport default function Image({ plantalaData }: IImageProps) {\n  return (\n    <Grid container justify=\"center\">\n      <img src={plantalaData} alt=\"Created Plantala\" />\n    </Grid>\n  );\n}\n","import React, {useState, useEffect} from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Avatar, Grid, Box, Slider, SwipeableDrawer, Typography } from '@material-ui/core';\nimport { IPlant } from '../plant/Plant';\n\ninterface IDrawerProps {\n  activePlant: IPlant,\n  setActivePlant: any,\n  transformPlant: any\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    avatar: {\n      width: theme.spacing(8),\n      height: theme.spacing(8),\n      borderColor: theme.palette.primary.main,\n      borderStyle: 'solid',\n      borderWidth: '2px',\n      cursor: 'pointer'\n    },\n    drawer: {\n      padding: theme.spacing(4),\n      width: 200,\n    }\n  }),\n);\n\nexport default function Drawer({activePlant, setActivePlant, transformPlant}: IDrawerProps) {\n  const classes = useStyles();\n  const [isOpen, setOpen] = useState(false);\n\n  useEffect(() => {\n    setOpen(activePlant.active || false);\n  }, [activePlant]);\n\n  const toggleDrawer = (open: boolean) => (\n    event: React.KeyboardEvent | React.MouseEvent,\n  ) => {\n    if (\n      event &&\n      event.type === 'keydown' &&\n      ((event as React.KeyboardEvent).key === 'Tab' ||\n        (event as React.KeyboardEvent).key === 'Shift')\n    ) {\n      return;\n    }\n    setOpen(open);\n    setActivePlant(null);\n  };\n\n  const selectedPlant = (\n    <Grid container justify=\"center\" className={classes.drawer} role=\"presentation\">\n      <Box>\n      <Avatar\n        key={activePlant.name}\n        alt={activePlant.name}\n        src={`${process.env.PUBLIC_URL}/assets/${activePlant.source}`}\n        className={classes.avatar}\n      />\n      <Typography id=\"rotation-slider\" gutterBottom>\n        Rotation\n      </Typography>\n      <Slider\n        aria-labelledby=\"rotation-slider\"\n        valueLabelDisplay=\"auto\"\n        max={360}\n        value={activePlant.rotation || 0}\n        onChange={(_event, newValue) => { transformPlant(activePlant, 'rotation', newValue) }}\n      />\n      <Typography id=\"rotation-slider\" gutterBottom>\n        Menge\n      </Typography>\n      <Slider\n        aria-labelledby=\"amount-slider\"\n        valueLabelDisplay=\"auto\"\n        min={4}\n        max={20}\n        value={activePlant.amount || 8}\n        onChange={(_event, newValue) => { transformPlant(activePlant, 'amount', newValue) }}\n      />\n      <Typography id=\"rotation-slider\" gutterBottom>\n        Größe\n      </Typography>\n      <Slider\n        aria-labelledby=\"scale-slider\"\n        valueLabelDisplay=\"auto\"\n        min={0.1}\n        step={0.1}\n        max={2}\n        value={activePlant.scale || 1}\n        onChange={(_event, newValue) => { transformPlant(activePlant, 'scale', newValue) }}\n      />\n      <Typography id=\"distance-slider\" gutterBottom>\n        Abstand\n      </Typography>\n      <Slider\n        aria-labelledby=\"distance-slider\"\n        valueLabelDisplay=\"auto\"\n        min={50}\n        max={300}\n        value={activePlant.distance || 50}\n        onChange={(_event, newValue) => { transformPlant(activePlant, 'distance', newValue) }}\n      />\n      </Box>\n    </Grid>\n    );\n\n  return (\n    <SwipeableDrawer\n      anchor=\"right\"\n      open={isOpen}\n      onClose={toggleDrawer(false)}\n      onOpen={toggleDrawer(true)}\n    >\n      {selectedPlant}\n    </SwipeableDrawer>\n  );\n}\n","import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Avatar, Grid } from '@material-ui/core';\nimport AvatarGroup from '@material-ui/lab/AvatarGroup';\nimport { IPlant } from '../plant/Plant';\nimport Drawer from '../drawer/Drawer';\nimport { avatarCount } from '../utils/Utils';\n\ninterface IFooterProps {\n  selectedPlants: IPlant[],\n  activePlant: IPlant,\n  setActivePlant: any,\n  transformPlant: any\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    footer: {\n      padding: theme.spacing(2),\n      backgroundColor: theme.palette.primary.main,\n    },\n    avatar: {\n      width: theme.spacing(8),\n      height: theme.spacing(8),\n      borderColor: theme.palette.secondary.main,\n      cursor: 'pointer'\n    }\n  }),\n);\n\nexport default function Footer({selectedPlants, activePlant, setActivePlant, transformPlant}: IFooterProps) {\n  const classes = useStyles();\n  const avatars = selectedPlants.slice(0, avatarCount).map(plant =>\n    <Avatar\n      key={plant.name}\n      alt={plant.name}\n      src={`${process.env.PUBLIC_URL}/assets/${plant.source}`}\n      className={classes.avatar}\n      onClick={() => setActivePlant(plant)}\n    />);\n\n  return (\n    <footer className={classes.footer}>\n      <Grid container spacing={2} justify=\"center\">\n        <AvatarGroup max={avatarCount}>\n          {avatars}\n        </AvatarGroup>\n        {activePlant && <Drawer\n          activePlant={activePlant}\n          setActivePlant={setActivePlant}\n          transformPlant={transformPlant}\n        />}\n      </Grid>\n    </footer>\n  );\n}\n","import React, { Component } from 'react';\nimport Header from '../app-header/Header';\nimport Main from '../app-main/Main';\nimport Footer from '../app-footer/Footer';\nimport './Plantala.css';\nimport { plantItems } from '../plantItems';\nimport { IPlant } from '../plant/Plant';\nimport { orderSelectedPlant, reorderSelectedPlant } from '../utils/Utils';\n\nexport enum Action {\n  Start = \"Start\",\n  Select = \"Select\",\n  Done = \"Done\",\n  Again = \"Again\"\n}\n\nfunction* getNextAction(): IterableIterator<Action> {\n  let current = Action.Start;\n  while (true) {\n    yield current;\n    yield Action.Select;\n    yield Action.Done;\n    yield Action.Again;\n  }\n}\n\nconst nextAction = getNextAction();\nnextAction.next();\n\ninterface IPlantalaState {\n  plants: IPlant[],\n  action: Action,\n  plantalaData: string\n}\n\nclass Plantala extends Component {\n  state: IPlantalaState = {\n    // values to be displayed in <Card />\n    plants: plantItems.map(plant => ({...plant, selected: false, order: 0})),\n    // action mode to be displayed in <Main />\n    action: Action.Start,\n    plantalaData: ''\n  }\n\n  setAction = () => {\n    this.setState({action: nextAction.next().value});\n  }\n\n  selectedPlants = (selectedPlant:IPlant) => {\n    const isSelected = selectedPlant.selected;\n    const plantOrder = isSelected ? 0 : this.state.plants.filter(plant => plant.selected === true).length + 1;\n    const selectedPlantsArray =\n      this.state.plants.map(\n        plant => plant === selectedPlant ? orderSelectedPlant(plant, plantOrder) : reorderSelectedPlant(plant, isSelected)\n      );\n    this.setState({ plants: selectedPlantsArray });\n  }\n\n  activatedPlants = (activePlant: IPlant) => {\n    const activatedPlantsArray =\n      this.state.plants.map(plant => plant === activePlant ? { ...plant, active: true } : { ...plant, active: false });\n    this.setState({ plants: activatedPlantsArray });\n  }\n\n  transformPlant = (transformedPlant: IPlant, transformName:string, newValue:number) => {\n    const transformedPlantsArray =\n      this.state.plants.map(plant => plant === transformedPlant ? { ...plant, [transformName]: newValue } : plant);\n    this.setState({ plants: transformedPlantsArray });\n  }\n\n  setPlantalaData = (plantalaData: string) => {\n    this.setState({ plantalaData: plantalaData });\n  }\n\n  render = () => {\n    const { plants, action, plantalaData } = this.state;\n    const selectedPlants = plants.filter((plant) => (plant.selected === true)).sort((a, b) => a.order  - b.order )\n    const activePlant = plants.filter((plant) => (plant.active === true))[0];\n\n    return (\n      <div className=\"plantala\">\n        <Header />\n        <Main\n          plants={plants}\n          selectedPlants={selectedPlants}\n          action={action}\n          setAction={this.setAction}\n          setSelectedPlant={this.selectedPlants}\n          plantalaData={plantalaData}\n          setPlantalaData={this.setPlantalaData}\n        />\n        <Footer\n          selectedPlants={selectedPlants}\n          activePlant={activePlant}\n          setActivePlant={this.activatedPlants}\n          transformPlant={this.transformPlant}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Plantala;\n","export const plantItems = [\n  {name:'Gummiakazie',source:'Acacia_Senegal_Gummiakazie_Ausschnitt_Bunt.png'},\n  {name:'Ananas',source:'Ananas_sativus_Schult. _Ananas_Ausschnitt_Bunt.png'},\n  {name:'Mohrenhirse',source:'Andropogon_Sorghum_Brotero_var._Durrha._Mohrenhirse_Ausschnitt_Bunt.png', description: 'Andropogon Sorghum Brotero'},\n  {name:'Erdnuss',source:'Arachis_hypogaea_Linné_Erdnuss_Ausschnitt_Bunt.png'},\n  {name:'Erdnuss Indischer Sesam',source:'Arachis_hypogaea,_Sesamum_indicum,_Sesamum_orientale_Erdnuss_Indischer_Sesam_Weißer_Sesam_Ausschnitt_Bunt.png'},\n  {name:'Traganthstrauch',source:'Astragalus_creticus_Lam. _Cretischer_Traganthstrauch_Ausschnitt_Bunt.png'},\n  {name:'Gemeines Bambusrohr',source:'Bambusa_arundinacea_Willd. _Gemeines_Bambusrohr_Ausschnitt_Bunt.png'},\n  {name:'Butterbaum',source:'Butyrospermum_Parkii_Kotschy,_Illipe_latifolia_Engler_Afrikanischer_Butterbaum,_Mahwabaum_Ausschnitt_Bunt.png'},\n  {name:'Spanischer Pfeffer',source:'Capsicum_longum_DC. _Spanischer_Pfeffer_Ausschnitt_Bunt.png'},\n  {name:'Spanischer Pfeffer II',source:'Capsicum_longum_DC._Spanischer_Pfeffer_Ausschnitt_Bunt.png'},\n  {name:'Papaya',source:'Carica_Papaya_Linné_Melonenbaum_Ausschnitt_Bunt.png'},\n  {name:'Edelkastanie',source:'Castanea_vulgaris_Edelkastanie_Ausschnitt_Bunt.png'},\n  {name:'Fieberrindenbaum',source:'Cinchona_Calisaya_var_ Josephiana_Weddell_Fieberrindenbaum_Ausschnitt_Bunt.png'},\n  {name:'Kampferbaum',source:'Cinnamomum_Camphora_Nees_et_Eberm._Kampferbaum_Ausschnitt_bunt.png'},\n  {name:'Kolabaum',source:'Cola_acuminata_R._Brown_Kolabaum_Ausschnitt_bunt.png'},\n  {name:'Eingerollte Farnpalme II',source:'Cycas_circinalis_Linné_Eingerollte_Farnpalme_2tes_Teil_Ausschnitt_Bunt.png'},\n  {name:'Eingerollte Farnpalme',source:'Cycas_circinalis_Linné_Eingerollte_Farnpalme_Ausschnitt_Bunt.png'},\n  {name:'Ebenholzbaum',source:'Diospyros_Dalechamps_Ebenholzbaum_Ausschnitt_Bunt.png'},\n  {name:'Echter Muskatnussbaum',source:'Echter_Muskatnussbaum_Ausschnitt_Bunt.png'},\n  {name:'Afrikanische Ölpalme',source:'Elaeis_guineensis_Linné_Afrikanische_Ölpalme_Ausschnitt_Bunt.png'},\n  {name:'Kardamompflanze',source:'Elettaria_cardamomum_White_Echte_Kardamompflanze_Ausschnitt_Bunt.png'},\n  {name:'Kardamom',source:'Elettaria_Cardamomum_White_et_Maton_Malobar_Cardamome_Ausschnitt_Bunt.png'},\n  {name:'Echter Gummiguttbaum',source:'Garcinia_Hanburyi_Hooker_L._Echter_Gummiguttbaum_Ausschnitt_Bunt.png'},\n  {name:'Kampecheholzbaum',source:'Haematoxylon_campecheanum_Linne_Kampecheholzbaum_Ausschnitt_Bunt.png'},\n  {name:'Amerikanischer Kopalbaum',source:'Hymenaea_Courbaril_L._Amerikanischer_Kopalbaum_Lokustbaum_Ausschnitt_Bunt.png'},\n  {name:'Amerikanischer Kopalbaum II',source:'Hymenaea_Courbaril_L._Amerikanischer_Kopalbaum_Lokustbaum_Teil2_Ausschnitt_Bunt.png'},\n  {name:'Amerikanischer Kopalbaum III',source:'Hymenaea_Courbaril_L._Amerikanischer_Kopalbaum_Lokustbaum_Teil3_Ausschnitt_Bunt.png'},\n  {name:'Paraguay Theestrauch',source:'Ilex_paraguariensis_St._Hilaire_Mate-Pflanze,_Paraguay_Theestrauch_Ausschnitt_Bunt.png'},\n  {name:'Indigopflanze',source:'Indigofera_tinctoria_Indigopflanze_Ausschnitt_Bunt.png'},\n  {name:'Gemeiner Walnussbaum',source:'Juglans_regia_Gemeiner_Walnussbaum_Ausschnitt_Bunt.png'},\n  {name:'Gemeiner Walnussbaum II',source:'Juglans_regia_Gemeiner_Walnussbaum_Teil2_Ausschnitt_Bunt.png'},\n  {name:'Schönblühende Kautschukliane',source:'Landolphia_comorensis,_var._florida_K._Schumann _Schönblühende_Kautschukliane_Ausschnitt_Bunt.png'},\n  {name:'Schönblühende Kautschukliane II',source:'Landolphia_comorensis,_var._florida_K._Schumann _Schönblühende_Kautschukliane_Teil2_Ausschnitt_Bunt.png'},\n  {name:'Schönblühende Kautschukliane III',source:'Landolphia_comorensis,_var._florida_K._Schumann _Schönblühende_Kautschukliane_Teil3_Ausschnitt_Bunt.png'},\n  {name:'Maniokstrauch',source:'Manihot_utilissima_Pohl_Maniok-_oder_Cassavestrauch_Ausschnitt_Bunt.png'},\n  {name:'Pfeilwurz',source:'Maranta_arundinacea_L. _Pfeilwurz_Ausschnitt_Bunt.png'},\n  {name:'Pfeilwurz II',source:'Maranta_arundinacea_L. _Pfeilwurz_Teil2_Ausschnitt_Bunt.png'},\n  {name:'Pfeilwurz III',source:'Maranta_arundinacea_L. _Pfeilwurz_Teil3_Ausschnitt_Bunt.png'},\n  {name:'Muskatnussbaum',source:'Myristica_fragrans_Houttuyn_Muskatnussbaum_Ausschnitt_Bunt.png'},\n  {name:'Muskatnussbaum II',source:'Myristica_fragrans_Houttuyn_Muskatnussbaum_Teil2_Ausschnitt_Bunt.png'},\n  {name:'Neuseeländischer Flachs',source:'Phormium_tenax,_Agave_americana_Neuseeländischer_Flachs_Amerikanische_Agave_Ausschnitt_Bunt.png'},\n  {name:'Indischer Sesam',source:'Sesamum_indicum_Linné_Sesamum_orientale_Linné_Indischer_Sesam_Weisser_Sesam_Ausschnitt_Bunt.png'},\n  {name:'Indischer Sesam II',source:'Sesamum_indicum_Linné_Sesamum_orientale_Linné_Indischer_Sesam_Weisser_Sesam_Teil2_Ausschnitt_Bunt.png'},\n  {name:'Brechnussbaum',source:'Strychnos_nux_vomica_L._Brechnussbaum_Ausschnitt_Bunt.png'},\n  {name:'Amerikanischer Mahagonibaum',source:'Swietenia_Mahagoni_L._Amerikanischer_Mahagonibaum_Ausschnitt_Bunt.png'},\n  {name:'Theestrauch',source:'Thea_chinensis_Linné_Theestrauch_Ausschnitt_Bunt.png'},\n  {name:'Kakaobaum',source:'Theobroma_Cacao_Linné_Kakaobaum_Ausschnitt_Bunt.png'},\n  {name:'Vanille',source:'Vanilla_planifolia_Andrews_Vanille_Ausschnitt_Bunt.png'},\n  {name:'Echter Ingwer',source:'Zingiber_officinale_Roscoe_Echter_Ingwer_Ausschnitt_Bunt.png'},\n  {name:'Echter Ingwer II',source:'Zingiber_officinale_Roscoe_Echter_Ingwer_Teil2_Ausschnitt_Bunt.png'}\n  \n]\n\nexport default plantItems;\n","import React from 'react';\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { theme } from '../theme';\nimport Plantala from '../app-plantala/Plantala';\n\nconst App = () =>  \n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <Plantala />\n  </ThemeProvider>\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}