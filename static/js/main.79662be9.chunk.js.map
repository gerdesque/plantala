{"version":3,"sources":["theme.js","logo.webp","app-header/Header.tsx","landing/Landing.tsx","plant-list/PlantList.tsx","utils/Utils.tsx","mandala/useCanvas.tsx","mandala/Mandala.tsx","app-main/Main.tsx","drawer/Drawer.tsx","app-footer/Footer.tsx","app-plantala/Plantala.tsx","plantItems.js","app/App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["theme","createMuiTheme","palette","primary","light","main","secondary","useStyles","makeStyles","header","backgroundColor","icon","marginRight","spacing","height","width","Header","classes","AppBar","position","className","Toolbar","src","logo","alt","Typography","variant","Landing","Grid","container","justify","plant","display","flexDirection","textAlign","borderColor","borderStyle","borderWidth","cursor","selected","plantHeader","common","black","marginLeft","marginTop","plantMedia","paddingTop","plantContent","PlantList","plants","setSelectedPlant","useState","isMoving","setMoving","itemClass","responsive","all","breakpoint","max","min","items","partialVisibilityGutter","renderDotsOutside","infinite","autoPlay","containerClass","customTransition","transitionDuration","centerMode","removeArrowOnDeviceType","beforeChange","afterChange","map","Card","onClick","CardHeader","title","name","CardMedia","image","process","source","description","CardContent","CardActions","Button","size","color","canvasWidth","canvasHeight","drawPlants","context","index","amount","order","rotation","scale","distance","getLayerDistance","step","Math","ceil","setImageValues","imageNumber","angle","PI","imageX","cos","imageY","sin","calculateImageCoordinates","imageRotation","calculateImageRotation","Image","onload","setTransform","rotate","drawImage","ButtonValue","HeaderValue","canvas","Mandala","selectedPlants","canvasRef","useRef","setPlants","useEffect","length","current","getContext","clearRect","forEach","useCanvas","ref","heroContent","padding","Main","action","setAction","Container","maxWidth","align","gutterBottom","item","md","fullWidth","disabled","Action","Select","Start","Done","createStyles","avatar","plantValues","Drawer","activePlant","setActivePlant","transformPlant","React","isOpen","setOpen","active","toggleDrawer","open","event","type","key","selectedPlant","role","Box","Avatar","id","Slider","aria-labelledby","valueLabelDisplay","value","onChange","_event","newValue","marks","SwipeableDrawer","anchor","onClose","onOpen","footer","Footer","avatars","slice","AvatarGroup","plantItems","getNextAction","Again","nextAction","next","Plantala","state","setState","selectedPlantsArray","activatedPlants","activatedPlantsArray","transformedPlant","transformName","filteredArray","render","filter","Component","App","ThemeProvider","CssBaseline","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iPAEaA,EAAQC,YAAe,CAClCC,QAAS,CACPC,QAAS,CACPC,MAAO,UACPC,KAAM,WAERC,UAAW,CACTD,KAAM,UACND,MAAO,c,4FCVE,MAA0B,kCCKnCG,EAAYC,aAAW,SAACR,GAAD,MAAY,CACvCS,OAAQ,CACNC,gBAAiBV,EAAME,QAAQC,QAAQE,MAEzCM,KAAM,CACJC,YAAaZ,EAAMa,QAAQ,GAC3BC,OAAQd,EAAMa,QAAQ,GACtBE,MAAOf,EAAMa,QAAQ,QAIV,SAASG,IACtB,IAAMC,EAAUV,IAEhB,OACE,8BACE,cAACW,EAAA,EAAD,CAAQC,SAAS,WAAWC,UAAWH,EAAQR,OAA/C,SACE,eAACY,EAAA,EAAD,WACE,qBAAKC,IAAKC,EAAMH,UAAWH,EAAQN,KAAMa,IAAI,kBAC7C,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,6B,qCCnBK,SAASC,IACtB,OACE,cAACC,EAAA,EAAD,CAAMR,UAAU,wBAAwBS,WAAS,EAACC,QAAQ,SAA1D,SACE,qBAAKR,IAAKC,EAAMH,UAAU,cAAcI,IAAI,e,0ECK5CjB,G,YAAYC,aAAW,SAACR,GAAD,MAAY,CACvC+B,MAAO,CACLjB,OAAQ,OACRkB,QAAS,OACTC,cAAe,SACfC,UAAW,SACXC,YAAanC,EAAME,QAAQC,QAAQE,KACnC+B,YAAa,QACbC,YAAarC,EAAMa,QAAQ,GAC3ByB,OAAQ,WAEVC,SAAU,CACRJ,YAAanC,EAAME,QAAQI,UAAUD,MAEvCmC,YAAa,CACX9B,gBAAiBV,EAAME,QAAQC,QAAQC,MACvC+B,YAAanC,EAAME,QAAQuC,OAAOC,MAClCN,YAAa,QACbC,YAAarC,EAAMa,QAAQ,IAC3B8B,WAAY3C,EAAMa,QAAQ,GAC1BD,YAAaZ,EAAMa,QAAQ,GAC3B+B,UAAW5C,EAAMa,QAAQ,IAE3BgC,WAAY,CACVC,WAAY,QAEdC,aAAc,CACZrC,gBAAiBV,EAAME,QAAQC,QAAQC,MACvC+B,YAAanC,EAAME,QAAQuC,OAAOC,MAClCN,YAAa,QACbC,YAAarC,EAAMa,QAAQ,IAC3B8B,WAAY3C,EAAMa,QAAQ,GAC1BD,YAAaZ,EAAMa,QAAQ,GAC3B+B,UAAW5C,EAAMa,QAAQ,SAId,SAASmC,EAAT,GAAmE,IAA9CC,EAA6C,EAA7CA,OAAQC,EAAqC,EAArCA,iBACpCjC,EAAUV,IAD+D,EASjD4C,oBAAS,GATwC,mBASxEC,EATwE,KAS9DC,EAT8D,KAU/E,OACI,cAAC,IAAD,CACAC,UAAU,aACVC,WAXe,CACjBC,IAAK,CACHC,WAAY,CAAEC,IAAK,IAAMC,IAAK,GAC9BC,MAAO,EACPC,wBAAyB,KAQzBC,mBAAiB,EACjBC,UAAU,EACVC,UAAU,EACVC,eAAe,qBACfC,iBAAiB,sBACjBC,mBAAoB,IACpBC,YAAY,EACZC,wBAAyB,CAAC,SAAU,UACpCC,aAAc,kBAAMjB,GAAU,IAC9BkB,YAAa,kBAAMlB,GAAU,IAZ7B,SAcCJ,EAAOuB,KAAI,SAAAzC,GAAK,OACf,eAAC0C,EAAA,EAAD,CAEErD,UAAS,UAAKH,EAAQc,MAAb,YAAsBA,EAAMQ,SAAWtB,EAAQsB,SAAW,IACnEmC,QAAS,WACFtB,GACHF,EAAiBnB,IALvB,UAQE,cAAC4C,EAAA,EAAD,CACEC,MAAO7C,EAAM8C,KACbzD,UAAWH,EAAQuB,cAErB,cAACsC,EAAA,EAAD,CACE1D,UAAWH,EAAQ4B,WACnBkC,MAAK,UAAKC,YAAL,mBAAsCjD,EAAMkD,QACjDL,MAAO7C,EAAM8C,OAEd9C,EAAMmD,aAAe,cAACC,EAAA,EAAD,CAAa/D,UAAWH,EAAQ8B,aAAhC,SACpB,cAACtB,EAAA,EAAD,UACGM,EAAMmD,gBAGX,cAACE,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQC,KAAK,QAAQC,MAAM,YAA3B,+BAtBGxD,EAAM8C,WC3Ed,IAAMW,EAAsB,IACtBC,EAAuB,ICEpC,SAASC,EAAYC,EAAkC5D,EAAc6D,GAInE,IAJmF,IAAD,EDA7E,SAAwB7D,EAAe6D,GAAe,MAcvD7D,EALF8D,cATyD,MAShD,EAAa,EAARD,EAT2C,IAcvD7D,EAJF+D,aAVyD,MAUhDF,EAAQ,EAVwC,IAcvD7D,EAHFgE,gBAXyD,MAW9C,EAX8C,IAcvDhE,EAFFiE,aAZyD,MAYjD,EAZiD,IAcvDjE,EADFuD,YAbyD,MAalD,IAbkD,EAmB3D,MAAO,CAAEO,SAAQI,SAGZ,SAA0BH,GAE/B,OAAO,GAAKA,EARaI,CAAiBJ,GAGfC,WAAUI,KAFhBC,KAAKC,KAAK,IAAMR,GAEMG,QAAOV,QCjBQgB,CAAevE,EAAO6D,GAAxEC,EAF0E,EAE1EA,OAAQI,EAFkE,EAElEA,SAAUF,EAFwD,EAExDA,SAAUI,EAF8C,EAE9CA,KAAMH,EAFwC,EAExCA,MAAOV,EAFiC,EAEjCA,KAFiC,WAIzEiB,GAJyE,MD2B7E,SAAmCA,EAAqBV,EAAgBI,GAC7E,IAAMO,EAASD,GAAeV,EAAS,GAAMO,KAAKK,GAIlD,MAAO,CAAEC,OAHMT,EAAWG,KAAKO,IAAIH,GAAShB,IAG3BoB,OAFFX,EAAWG,KAAKS,IAAIL,GAASf,KCzBfqB,CAA0BP,EAAaV,EAAQI,GAAlES,EALwE,EAKxEA,OAAQE,EALgE,EAKhEA,OACRG,ED6BL,SAAgCR,EAAqBR,EAAkBI,GAG5E,MAAO,CAAEY,cAFahB,EAAWI,EAAOI,EAAcH,KAAKK,GAAK,KC9BpCO,CAAuBT,EAAaR,EAAUI,GAAhEY,cAEFhC,EAAQ,IAAIkC,MAElBlC,EAAMmC,OAAS,WAEbvB,EAAQwB,aAAanB,EAAO,EAAG,EAAGA,EAAOU,EAAQE,GACjDjB,EAAQyB,OAAOL,GACfpB,EAAQ0B,UAAUtC,GAAQO,EAAO,GAAIA,EAAO,EAAGA,EAAMA,IAMvDP,EAAMzD,IAAN,UAAe0D,YAAf,mBAAgDjD,EAAMkD,SAhB/CsB,EAAc,EAAGA,EAAcV,EAAQU,IAAiB,EAAxDA,GCAX,ICAYe,EAOAC,EDPNhH,EAAYC,aAAW,iBAAO,CAClCgH,OAAQ,CACNzG,MAAO,OACPD,OAAQ,YAsBG2G,EAlBC,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,eACXzG,EAAUV,IADqC,EDahD,WACL,IAAMoH,EAAYC,iBAA0B,MADnB,EAEGzE,mBAAS,IAFZ,mBAElBF,EAFkB,KAEV4E,EAFU,KAsBzB,OAlBAC,qBAAU,WACR,GAAI7E,EAAO8E,OAAS,GAAKJ,EAAUK,QAAS,CAC1C,IACMrC,EADYgC,EAAUK,QACFC,WAAW,MACjCtC,IACFA,EAAQwB,aAAa,EAAE,EAAE,EAAE,EAAE,EAAE,GAC/BxB,EAAQuC,UAAW,EAAE,EAAG1C,EAAaC,GAIrCxC,EAAOkF,SAAQ,SAACpG,EAAO6D,GACrBF,EAAWC,EAAS5D,EAAO6D,UAKhC,CAAC3C,IAEG,CAAE4E,YAAWF,YAAWnC,cAAaC,gBCjCgB2C,GAApDP,EAF6C,EAE7CA,UAAWF,EAFkC,EAElCA,UAAWnC,EAFuB,EAEvBA,YAAaC,EAFU,EAEVA,aAM3C,OAJAqC,qBAAU,WACRD,EAAUH,KACT,CAACA,EAAgBG,IAGlB,wBACEQ,IAAKV,EACLvG,UAAWH,EAAQuG,OACnBzG,MAAOyE,EACP1E,OAAQ2E,M,SCpBF6B,K,cAAAA,E,4BAAAA,E,cAAAA,E,kCAAAA,M,cAOAC,K,gCAAAA,E,2BAAAA,E,8BAAAA,E,6BAAAA,M,KAeZ,IAAMhH,EAAYC,aAAW,SAACR,GAAD,MAAY,CACvCsI,YAAa,CACXC,QAASvI,EAAMa,QAAQ,IAEzBR,KAAM,CACJK,gBAAiBV,EAAME,QAAQC,QAAQC,MACvCW,MAAO,eAII,SAASyH,EAAT,GAA4F,IAA5EvF,EAA2E,EAA3EA,OAAQyE,EAAmE,EAAnEA,eAAgBe,EAAmD,EAAnDA,OAAQC,EAA2C,EAA3CA,UAAWxF,EAAgC,EAAhCA,iBAClEjC,EAAUV,IAEhB,OACE,uBAAMa,UAAWH,EAAQZ,KAAzB,UACE,eAACsI,EAAA,EAAD,CAAWC,SAAS,KAAKxH,UAAWH,EAAQqH,YAA5C,UACE,cAAC7G,EAAA,EAAD,CAAYC,QAAQ,KAAKmH,MAAM,SAAStD,MAAM,cAAcuD,cAAY,EAAxE,SACGvB,EAAYkB,KAEf,8BACE,cAAC7G,EAAA,EAAD,CAAMC,WAAS,EAAChB,QAAS,EAAGiB,QAAQ,SAApC,SACE,cAACF,EAAA,EAAD,CAAMmH,MAAI,EAACC,GAAI,EAAf,SACE,cAAC3D,EAAA,EAAD,CAAQ3D,QAAQ,YAAY6D,MAAM,YAAY0D,WAAS,EAACvE,QAASgE,EAAWQ,SAAUT,IAAWU,GAAOC,QAAoC,IAA1B1B,EAAeK,OAAjI,SACGT,EAAYmB,cAMvB,eAACE,EAAA,EAAD,CAAWC,SAAS,KAApB,UACGH,IAAWU,GAAOE,OAAS,cAAC,EAAD,IAC3BZ,IAAWU,GAAOC,QAAU,cAAC,EAAD,CAAWnG,OAAQA,EAAQC,iBAAkBA,IACzEuF,IAAWU,GAAOG,MAAQ,cAAC,EAAD,CAAS5B,eAAgBA,U,0DCpDtDnH,GAAYC,aAAW,SAACR,GAAD,OAC3BuJ,YAAa,CACXC,OAAQ,CACNzI,MAAOf,EAAMa,QAAQ,GACrBC,OAAQd,EAAMa,QAAQ,GACtBsB,YAAanC,EAAME,QAAQC,QAAQE,KACnC+B,YAAa,QACbC,YAAa,MACbC,OAAQ,WAEVmH,YAAa,CACXlB,QAASvI,EAAMa,QAAQ,SAKd,SAAS6I,GAAT,GAA8E,IAA7DC,EAA4D,EAA5DA,YAAaC,EAA+C,EAA/CA,eAAgBC,EAA+B,EAA/BA,eACrD5I,EAAUV,KAD0E,EAEhEuJ,IAAM3G,UAAS,GAFiD,mBAEnF4G,EAFmF,KAE3EC,EAF2E,KAI1FF,IAAMhC,WAAU,WACdkC,EAAQL,EAAYM,SAAU,KAC7B,CAACN,IAEJ,IAAMO,EAAe,SAACC,GAAD,OAAmB,SACtCC,KAGEA,GACe,YAAfA,EAAMC,MACkC,QAAtCD,EAA8BE,KACS,UAAtCF,EAA8BE,OAInCN,EAAQG,GACRP,EAAe,SAGXW,EACJ,cAAC3I,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASV,UAAWH,EAAQwI,YAAae,KAAK,eAAtE,SACE,eAACC,EAAA,EAAD,WACA,cAACC,EAAA,EAAD,CAEElJ,IAAKmI,EAAY9E,KACjBvD,IAAG,UAAK0D,YAAL,mBAAsC2E,EAAY1E,QACrD7D,UAAWH,EAAQuI,QAHdG,EAAY9E,MAKnB,cAACpD,EAAA,EAAD,CAAYkJ,GAAG,kBAAkB7B,cAAY,EAA7C,sBAGA,cAAC8B,EAAA,EAAD,CACEC,kBAAgB,kBAChBC,kBAAkB,OAClBpH,IAAK,IACLqH,MAAOpB,EAAY5D,UAAY,EAC/BiF,SAAU,SAACC,EAAQC,GAAerB,EAAeF,EAAa,WAAYuB,MAE5E,cAACzJ,EAAA,EAAD,CAAYkJ,GAAG,kBAAkB7B,cAAY,EAA7C,mBAGA,cAAC8B,EAAA,EAAD,CACEC,kBAAgB,gBAChBC,kBAAkB,OAClBK,OAAK,EACLxH,IAAK,EACLD,IAAK,GACLqH,MAAOpB,EAAY9D,QAAU,EAC7BmF,SAAU,SAACC,EAAQC,GAAerB,EAAeF,EAAa,SAAUuB,MAE1E,cAACzJ,EAAA,EAAD,CAAYkJ,GAAG,kBAAkB7B,cAAY,EAA7C,yBAGA,cAAC8B,EAAA,EAAD,CACEC,kBAAgB,eAChBC,kBAAkB,OAClBK,OAAK,EACLxH,IAAK,GACLwC,KAAM,GACNzC,IAAK,EACLqH,MAAOpB,EAAY3D,OAAS,EAC5BgF,SAAU,SAACC,EAAQC,GAAerB,EAAeF,EAAa,QAASuB,WAM7E,OACE,cAACE,GAAA,EAAD,CACEC,OAAO,QACPlB,KAAMJ,EACNuB,QAASpB,GAAa,GACtBqB,OAAQrB,GAAa,GAJvB,SAMGK,IC3FP,IAAMhK,GAAYC,aAAW,SAACR,GAAD,OAC3BuJ,YAAa,CACXiC,OAAQ,CACNjD,QAASvI,EAAMa,QAAQ,GACvBH,gBAAiBV,EAAME,QAAQC,QAAQE,MAEzCmJ,OAAQ,CACNzI,MAAOf,EAAMa,QAAQ,GACrBC,OAAQd,EAAMa,QAAQ,GACtBsB,YAAanC,EAAME,QAAQI,UAAUD,KACrCiC,OAAQ,gBAKC,SAASmJ,GAAT,GAA8F,IAA7E/D,EAA4E,EAA5EA,eAAgBiC,EAA4D,EAA5DA,YAAaC,EAA+C,EAA/CA,eAAgBC,EAA+B,EAA/BA,eACrE5I,EAAUV,KAIVmL,EAAUhE,EAAeiE,MAAM,EADjB,GACiCnH,KAAI,SAAAzC,GAAK,OAC5D,cAAC2I,EAAA,EAAD,CAEElJ,IAAKO,EAAM8C,KACXvD,IAAG,UAAK0D,YAAL,mBAAsCjD,EAAMkD,QAC/C7D,UAAWH,EAAQuI,OACnB9E,QAAS,kBAAMkF,EAAe7H,KAJzBA,EAAM8C,SAOf,OACE,wBAAQzD,UAAWH,EAAQuK,OAA3B,SACE,eAAC5J,EAAA,EAAD,CAAMC,WAAS,EAAChB,QAAS,EAAGiB,QAAQ,SAApC,UACE,cAAC8J,EAAA,EAAD,CAAalI,IAAK,EAAlB,SACGgI,IAEF/B,GAAe,cAACD,GAAD,CACdC,YAAaA,EACbC,eAAgBA,EAChBC,eAAgBA,S,UC5CdV,GCRC0C,GAAa,CACxB,CAAChH,KAAK,cAAcI,OAAO,iDAAkD1C,UAAU,GACvF,CAACsC,KAAK,SAASI,OAAO,qDAAsD1C,UAAU,GACtF,CAACsC,KAAK,cAAcI,OAAO,0EAA2EC,YAAa,6BAA8B3C,UAAU,GAC3J,CAACsC,KAAK,UAAUI,OAAO,wDAAsD1C,UAAU,GACvF,CAACsC,KAAK,0BAA0BI,OAAO,mHAAiH1C,UAAU,GAClK,CAACsC,KAAK,kBAAkBI,OAAO,2EAA4E1C,UAAU,GACrH,CAACsC,KAAK,sBAAsBI,OAAO,sEAAuE1C,UAAU,GACpH,CAACsC,KAAK,aAAaI,OAAO,gHAAiH1C,UAAU,GACrJ,CAACsC,KAAK,qBAAqBI,OAAO,8DAA+D1C,UAAU,GAC3G,CAACsC,KAAK,wBAAwBI,OAAO,6DAA8D1C,UAAU,GAC7G,CAACsC,KAAK,SAASI,OAAO,yDAAuD1C,UAAU,GACvF,CAACsC,KAAK,eAAeI,OAAO,qDAAsD1C,UAAU,GAC5F,CAACsC,KAAK,mBAAmBI,OAAO,iFAAkF1C,UAAU,GAC5H,CAACsC,KAAK,cAAcI,OAAO,qEAAsE1C,UAAU,GAC3G,CAACsC,KAAK,WAAWI,OAAO,uDAAwD1C,UAAU,GAC1F,CAACsC,KAAK,2BAA2BI,OAAO,gFAA8E1C,UAAU,GAChI,CAACsC,KAAK,wBAAwBI,OAAO,sEAAoE1C,UAAU,GACnH,CAACsC,KAAK,eAAeI,OAAO,wDAAyD1C,UAAU,GAC/F,CAACsC,KAAK,wBAAwBI,OAAO,4CAA6C1C,UAAU,GAC5F,CAACsC,KAAK,0BAAuBI,OAAO,yEAAoE1C,UAAU,GAClH,CAACsC,KAAK,kBAAkBI,OAAO,uEAAwE1C,UAAU,GACjH,CAACsC,KAAK,WAAWI,OAAO,4EAA6E1C,UAAU,GAC/G,CAACsC,KAAK,uBAAuBI,OAAO,uEAAwE1C,UAAU,GACtH,CAACsC,KAAK,mBAAmBI,OAAO,uEAAwE1C,UAAU,GAClH,CAACsC,KAAK,2BAA2BI,OAAO,gFAAiF1C,UAAU,GACnI,CAACsC,KAAK,8BAA8BI,OAAO,sFAAuF1C,UAAU,GAC5I,CAACsC,KAAK,+BAA+BI,OAAO,sFAAuF1C,UAAU,GAC7I,CAACsC,KAAK,uBAAuBI,OAAO,yFAA0F1C,UAAU,GACxI,CAACsC,KAAK,gBAAgBI,OAAO,yDAA0D1C,UAAU,GACjG,CAACsC,KAAK,uBAAuBI,OAAO,yDAA0D1C,UAAU,GACxG,CAACsC,KAAK,0BAA0BI,OAAO,+DAAgE1C,UAAU,GACjH,CAACsC,KAAK,qCAA+BI,OAAO,0GAAqG1C,UAAU,GAC3J,CAACsC,KAAK,wCAAkCI,OAAO,gHAA2G1C,UAAU,GACpK,CAACsC,KAAK,yCAAmCI,OAAO,gHAA2G1C,UAAU,GACrK,CAACsC,KAAK,gBAAgBI,OAAO,0EAA2E1C,UAAU,GAClH,CAACsC,KAAK,YAAYI,OAAO,wDAAyD1C,UAAU,GAC5F,CAACsC,KAAK,eAAeI,OAAO,8DAA+D1C,UAAU,GACrG,CAACsC,KAAK,gBAAgBI,OAAO,8DAA+D1C,UAAU,GACtG,CAACsC,KAAK,iBAAiBI,OAAO,iEAAkE1C,UAAU,GAC1G,CAACsC,KAAK,oBAAoBI,OAAO,uEAAwE1C,UAAU,GACnH,CAACsC,KAAK,6BAA0BI,OAAO,qGAAmG1C,UAAU,GACpJ,CAACsC,KAAK,kBAAkBI,OAAO,wGAAmG1C,UAAU,GAC5I,CAACsC,KAAK,qBAAqBI,OAAO,8GAAyG1C,UAAU,GACrJ,CAACsC,KAAK,gBAAgBI,OAAO,4DAA6D1C,UAAU,GACpG,CAACsC,KAAK,8BAA8BI,OAAO,wEAAyE1C,UAAU,GAC9H,CAACsC,KAAK,cAAcI,OAAO,0DAAwD1C,UAAU,GAC7F,CAACsC,KAAK,YAAYI,OAAO,yDAAuD1C,UAAU,GAC1F,CAACsC,KAAK,UAAUI,OAAO,yDAA0D1C,UAAU,GAC3F,CAACsC,KAAK,gBAAgBI,OAAO,+DAAgE1C,UAAU,GACvG,CAACsC,KAAK,mBAAmBI,OAAO,qEAAsE1C,UAAU,I,YDnCxGuJ,IAAV,SAAUA,KAAV,uEACM9D,EAAUmB,GAAOE,MADvB,OAGI,OAHJ,SAGUrB,EAHV,OAII,OAJJ,SAIUmB,GAAOC,OAJjB,OAKI,OALJ,SAKUD,GAAOG,KALjB,OAMI,OANJ,UAMUH,GAAO4C,MANjB,iE,SAPY5C,K,cAAAA,E,gBAAAA,E,YAAAA,E,eAAAA,Q,KAiBZ,IAAM6C,GAAaF,KACnBE,GAAWC,O,IAoEIC,G,4MA1DbC,MAAwB,CAEtBlJ,OAAQ4I,GAERnE,eAAgB,GAEhBiC,YAAa,GAEblB,OAAQU,GAAOE,O,EAGjBX,UAAY,WACV,EAAK0D,SAAS,CAAC3D,OAAQuD,GAAWC,OAAOlB,S,EAG3CrD,eAAiB,SAAC6C,GAChB,IAAM8B,EACJ,EAAKF,MAAMlJ,OAAOuB,KAAI,SAAAzC,GAAK,OAAIA,IAAUwI,EAAV,2BAA+BxI,GAA/B,IAAsCQ,UAAWR,EAAMQ,WAAaR,KACrG,EAAKqK,SAAS,CAAEnJ,OAAQoJ,K,EAG1BC,gBAAkB,SAAC3C,GACjB,IAAM4C,EACJ,EAAKJ,MAAMlJ,OAAOuB,KAAI,SAAAzC,GAAK,OAAIA,IAAU4H,EAAV,2BAA6B5H,GAA7B,IAAoCkI,QAASlI,EAAMkI,SAAnD,2BAAmElI,GAAnE,IAA0EkI,QAAQ,OACnH,EAAKmC,SAAS,CAAEnJ,OAAQsJ,K,EAG1B1C,eAAiB,SAAC2C,EAA0BC,EAAsBvB,GAChE,IAAMwB,EACJ,EAAKP,MAAMlJ,OAAOuB,KAAI,SAAAzC,GAAK,OAAIA,IAAUyK,EAAV,2BAAkCzK,GAAlC,kBAA0C0K,EAAgBvB,IAAanJ,KACxG,EAAKqK,SAAS,CAAEnJ,OAAQyJ,K,EAG1BC,OAAS,WAAO,IAAD,EACc,EAAKR,MAAxBlJ,EADK,EACLA,OAAQwF,EADH,EACGA,OACVf,EAAiBzE,EAAO2J,QAAO,SAAC7K,GAAD,OAA+B,IAAnBA,EAAMQ,YACjDoH,EAAc1G,EAAO2J,QAAO,SAAC7K,GAAD,OAA6B,IAAjBA,EAAMkI,UAAkB,GAEtE,OACE,sBAAK7I,UAAU,WAAf,UACE,cAACJ,EAAD,IACA,cAACwH,EAAD,CACEvF,OAAQA,EACRyE,eAAgBA,EAChBe,OAAQA,EACRC,UAAW,EAAKA,UAChBxF,iBAAkB,EAAKwE,iBACzB,cAAC+D,GAAD,CACE/D,eAAgBA,EAChBiC,YAAaA,EACbC,eAAgB,EAAK0C,gBACrBzC,eAAgB,EAAKA,qB,YApDRgD,aEvBRC,GANH,kBACV,eAACC,EAAA,EAAD,CAAe/M,MAAOA,EAAtB,UACE,cAACgN,EAAA,EAAD,IACA,cAAC,GAAD,QCGgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCfnC,IAYeC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASpB,OACP,cAAC,GAAD,IACAqB,SAASC,eAAe,SF4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBX,MAAK,SAACY,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YEvH5BpB,O","file":"static/js/main.79662be9.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles'\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: '#D6E7E4',\n      main: '#9EC6BF',\n    },\n    secondary: {\n      main: '#992572',\n      light: '#CD58A1'\n    },\n  },\n});\n\nexport default theme;\n","export default __webpack_public_path__ + \"static/media/logo.5d8ee067.webp\";","import React from 'react';\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport logo from '../logo.webp';\n\nconst useStyles = makeStyles((theme) => ({\n  header: {\n    backgroundColor: theme.palette.primary.main,\n  },\n  icon: {\n    marginRight: theme.spacing(2),\n    height: theme.spacing(8),\n    width: theme.spacing(8)\n  }\n}));\n\nexport default function Header() {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <AppBar position=\"relative\" className={classes.header}>\n        <Toolbar>\n          <img src={logo} className={classes.icon} alt=\"Plantala logo\" />\n          <Typography variant=\"h2\">\n            Plantala\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n}\n","import React from 'react';\nimport { Grid } from '@material-ui/core';\nimport logo from '../logo.webp';\nimport './Landing.css';\n\nexport default function Landing() {\n  return (\n    <Grid className=\"app-landing-container\" container justify=\"center\">\n      <img src={logo} className=\"app-landing\" alt=\"Plantala\" />\n    </Grid>\n  );\n}\n","import React, {useState} from 'react';\nimport { Button, Card, CardActions, CardMedia, CardContent, Typography, CardHeader } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Carousel from \"react-multi-carousel\";\nimport \"react-multi-carousel/lib/styles.css\";\nimport './PlantList.css';\nimport { IPlant } from '../plant/Plant';\n\ninterface IPlantListProps {\n  plants: IPlant[],\n  setSelectedPlant: any\n}\n\nconst useStyles = makeStyles((theme) => ({\n  plant: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    textAlign: 'center',\n    borderColor: theme.palette.primary.main,\n    borderStyle: 'solid',\n    borderWidth: theme.spacing(2),\n    cursor: 'pointer'\n  },\n  selected: {\n    borderColor: theme.palette.secondary.main,\n  },\n  plantHeader: {\n    backgroundColor: theme.palette.primary.light,\n    borderColor: theme.palette.common.black,\n    borderStyle: 'solid',\n    borderWidth: theme.spacing(0.5),\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    marginTop: theme.spacing(2),\n  },\n  plantMedia: {\n    paddingTop: '100%',\n  },\n  plantContent: {\n    backgroundColor: theme.palette.primary.light,\n    borderColor: theme.palette.common.black,\n    borderStyle: 'solid',\n    borderWidth: theme.spacing(0.5),\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    marginTop: theme.spacing(2),\n  },\n}));\n\nexport default function PlantList({ plants, setSelectedPlant }: IPlantListProps) {\n  const classes = useStyles();\n  const responsive = {\n    all: {\n      breakpoint: { max: 5000, min: 0 },\n      items: 1,\n      partialVisibilityGutter: 10\n    }\n  };\n  const [isMoving, setMoving] = useState(false);\n  return (\n      <Carousel\n      itemClass=\"image-item\"\n      responsive={responsive}\n      renderDotsOutside\n      infinite={true}\n      autoPlay={false}\n      containerClass=\"carousel-container\"\n      customTransition=\"all .3s ease-in-out\"\n      transitionDuration={300}\n      centerMode={true}\n      removeArrowOnDeviceType={[\"tablet\", \"mobile\"]}\n      beforeChange={() => setMoving(true) }\n      afterChange={() => setMoving(false) }\n    >\n      {plants.map(plant => (\n        <Card \n          key={plant.name}\n          className={`${classes.plant} ${plant.selected ? classes.selected : ''}`}\n          onClick={() => {\n            if (!isMoving) {\n              setSelectedPlant(plant)\n            }\n            }}>\n          <CardHeader\n            title={plant.name}\n            className={classes.plantHeader}\n          />\n          <CardMedia\n            className={classes.plantMedia}\n            image={`${process.env.PUBLIC_URL}/assets/${plant.source}`}\n            title={plant.name}\n          />\n          {plant.description && <CardContent className={classes.plantContent}>\n            <Typography>\n              {plant.description}\n            </Typography>\n          </CardContent>}\n          <CardActions>\n            <Button size=\"small\" color=\"secondary\">\n              Mehr erfahren\n            </Button>\n          </CardActions>\n        </Card>\n      ))}\n      </Carousel>\n  );\n}\n","import { IPlant } from '../plant/Plant';\n\nexport const canvasWidth: number = 800;\nexport const canvasHeight: number = 800;\n\nexport function setImageValues(plant: IPlant, index: number) {\n  /* TODO\n    Add plant.amount from 4 - 20\n    Add plant.order\n    Add plant.rotation from 0 - 360\n    Add plant.scale from 0.1 - 2\n    Add plant.size\n  */\n  const { \n    amount = 8 + (index * 2),\n    order = (index + 1),\n    rotation = 0,\n    scale = 1,\n    size = 100,\n  } = plant;\n\n  const distance: number = getLayerDistance(order);\n  const step: number = Math.ceil(360 / amount);\n\n  return { amount, distance, rotation, step, scale, size };\n}\n  \nexport function getLayerDistance(order:number) {\n  //TODO: Add layer.scale in pixel from 50 - 300\n  return 50 * order;\n}\n\nexport function calculateImageCoordinates(imageNumber: number, amount: number, distance: number) {\n  const angle = (imageNumber / (amount / 2)) * Math.PI;\n  const imageX = distance * Math.cos(angle) + canvasWidth / 2;\n  const imageY = distance * Math.sin(angle) + canvasHeight / 2;\n\n  return { imageX, imageY };\n}\n\nexport function calculateImageRotation(imageNumber: number, rotation: number, step: number) {\n  const imageRotation = rotation + step * imageNumber * Math.PI / 180;\n\n  return { imageRotation };\n}\n\n/* istanbul ignore next */\nexport function drawCoordinateSystem (context:CanvasRenderingContext2D) {\n  for (var x = 0.5; x < canvasWidth; x += 10) {\n    context.moveTo(x, 0);\n    context.lineTo(x, canvasWidth);\n  }\n  for (var y = 0.5; y < canvasHeight; y += 10) {\n    context.moveTo(0, y);\n    context.lineTo(canvasHeight, y);\n  }\n  context.strokeStyle = \"#eee\";\n  context.stroke();\n\n  context.beginPath();\n  context.moveTo(0, canvasHeight/2);\n  context.lineTo(canvasWidth, canvasHeight/2);\n  context.moveTo(canvasWidth/2, 0);\n  context.lineTo(canvasWidth/2, canvasHeight);\n  context.strokeStyle = \"#000\";\n  context.stroke();\n}\n","import { useState, useEffect, useRef } from 'react';\nimport { calculateImageCoordinates, calculateImageRotation, setImageValues, canvasHeight, canvasWidth } from '../utils/Utils';\nimport { IPlant } from '../plant/Plant';\n\n\nfunction drawPlants (context:CanvasRenderingContext2D, plant:IPlant, index: number) {\n\n  const { amount, distance, rotation, step, scale, size } = setImageValues(plant, index);\n\n  for (let imageNumber = 0; imageNumber < amount; imageNumber ++) {\n    const { imageX, imageY } = calculateImageCoordinates(imageNumber, amount, distance);\n    const { imageRotation } = calculateImageRotation(imageNumber, rotation, step);\n  \n    const image = new Image();\n\n    image.onload = () => {\n      //console.log(`name: ${plant.name}, imageNumber: ${imageNumber}, size: ${size}, scale: ${scale}, rotation: ${rotation}, imageX: ${imageX}, imageY: ${imageY}`);\n      context.setTransform(scale, 0, 0, scale, imageX, imageY);\n      context.rotate(imageRotation);\n      context.drawImage(image, -size / 2, -size / 2, size, size);\n\n      // context.lineWidth = 2;\n      // context.strokeRect(-size / 2, -size / 2, size, size);\n    }\n\n    image.src = `${process.env.PUBLIC_URL}/assets/${plant.source}`;\n  }\n}\n\nexport function useCanvas(){\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [plants, setPlants] = useState([] as IPlant[]);\n\n  useEffect(() => {\n    if (plants.length > 0 && canvasRef.current) {\n      const canvasObj = canvasRef.current;\n      const context = canvasObj.getContext('2d');\n      if (context) {\n        context.setTransform(1,0,0,1,0,0);\n        context.clearRect( 0,0, canvasWidth, canvasHeight );\n        //drawCoordinateSystem(context);\n\n        // TODO: use plant.order instead of index\n        plants.forEach((plant, index) => {\n          drawPlants(context, plant, index); \n        });\n\n      }\n    }\n  }, [plants]);\n\n  return { setPlants, canvasRef, canvasWidth, canvasHeight };\n}\n\n","import React, {useEffect} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useCanvas } from './useCanvas';\nimport { IPlant } from '../plant/Plant';\n\ninterface IMandalaProps {\n  selectedPlants: IPlant[],\n}\n\nconst useStyles = makeStyles(() => ({\n  canvas: {\n    width: '100%',\n    height: 'auto'\n  }\n}));\n\nconst Mandala = ({ selectedPlants }: IMandalaProps) => {\n  const classes = useStyles();\n  const { setPlants, canvasRef, canvasWidth, canvasHeight } = useCanvas();\n\n  useEffect(() => {\n    setPlants(selectedPlants);\n  }, [selectedPlants, setPlants]);\n\n  return (\n    <canvas \n      ref={canvasRef}\n      className={classes.canvas}\n      width={canvasWidth}\n      height={canvasHeight}\n    />\n  );\n};\n\nexport default Mandala;\n","import React from 'react';\nimport { Button, Container, Grid, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { IPlant } from '../plant/Plant';\nimport Landing from '../landing/Landing';\nimport PlantList from '../plant-list/PlantList';\nimport Mandala from '../mandala/Mandala';\nimport { Action } from '../app-plantala/Plantala';\n\nexport enum ButtonValue {\n  Start = \"Start\",\n  Select = \"Plantala erstellen\",\n  Done = \"Fertig\",\n  Again = \"Neues Plantala erstellen\"\n}\n\nexport enum HeaderValue {\n  Start = \"Erstelle dein Plantala!\",\n  Select = \"Wähle 5 Karten\",\n  Done = \"Gestalte dein Plantala\",\n  Again = \"Teile dein Plantala\"\n}\n\ninterface IMainProps {\n  plants: IPlant[],\n  selectedPlants: IPlant[],\n  action: Action,\n  setAction: any,\n  setSelectedPlant: any\n}\n\nconst useStyles = makeStyles((theme) => ({\n  heroContent: {\n    padding: theme.spacing(2),\n  },\n  main: {\n    backgroundColor: theme.palette.primary.light,\n    width: 'inherit'\n  },\n}));\n\nexport default function Main({ plants, selectedPlants, action, setAction, setSelectedPlant }: IMainProps) {\n  const classes = useStyles();\n\n  return (\n    <main className={classes.main}>\n      <Container maxWidth=\"md\" className={classes.heroContent}>\n        <Typography variant=\"h5\" align=\"center\" color=\"textPrimary\" gutterBottom>\n          {HeaderValue[action]}\n        </Typography>\n        <div>\n          <Grid container spacing={2} justify=\"center\">\n            <Grid item md={3}>\n              <Button variant=\"contained\" color=\"secondary\" fullWidth onClick={setAction} disabled={action === Action.Select && selectedPlants.length === 0}>\n                {ButtonValue[action]}\n              </Button>\n            </Grid>\n          </Grid>\n        </div>\n      </Container>\n      <Container maxWidth=\"sm\">\n        {action === Action.Start && <Landing /> }\n        {action === Action.Select && <PlantList plants={plants} setSelectedPlant={setSelectedPlant} /> }\n        {action === Action.Done && <Mandala selectedPlants={selectedPlants} /> }\n          {/* <Mandala /> */}\n      </Container>\n    </main>\n  );\n}\n","import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Avatar, Grid, Box, Slider, SwipeableDrawer, Typography } from '@material-ui/core';\nimport { IPlant } from '../plant/Plant';\n\ninterface IDrawerProps {\n  activePlant: IPlant,\n  setActivePlant: any,\n  transformPlant: any\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    avatar: {\n      width: theme.spacing(8),\n      height: theme.spacing(8),\n      borderColor: theme.palette.primary.main,\n      borderStyle: 'solid',\n      borderWidth: '2px',\n      cursor: 'pointer'\n    },\n    plantValues: {\n      padding: theme.spacing(4),\n    }\n  }),\n);\n\nexport default function Drawer({activePlant, setActivePlant, transformPlant}: IDrawerProps) {\n  const classes = useStyles();\n  const [isOpen, setOpen] = React.useState(false);\n\n  React.useEffect(() => {\n    setOpen(activePlant.active || false);\n  }, [activePlant]);\n\n  const toggleDrawer = (open: boolean) => (\n    event: React.KeyboardEvent | React.MouseEvent,\n  ) => {\n    if (\n      event &&\n      event.type === 'keydown' &&\n      ((event as React.KeyboardEvent).key === 'Tab' ||\n        (event as React.KeyboardEvent).key === 'Shift')\n    ) {\n      return;\n    }\n    setOpen(open);\n    setActivePlant(null);\n  };\n\n  const selectedPlant = (\n    <Grid container justify=\"center\" className={classes.plantValues} role=\"presentation\">\n      <Box>\n      <Avatar\n        key={activePlant.name}\n        alt={activePlant.name}\n        src={`${process.env.PUBLIC_URL}/assets/${activePlant.source}`}\n        className={classes.avatar}\n      />\n      <Typography id=\"rotation-slider\" gutterBottom>\n        Rotation\n      </Typography>\n      <Slider\n        aria-labelledby=\"rotation-slider\"\n        valueLabelDisplay=\"auto\"\n        max={360}\n        value={activePlant.rotation || 0}\n        onChange={(_event, newValue) => { transformPlant(activePlant, 'rotation', newValue) }}\n      />\n      <Typography id=\"rotation-slider\" gutterBottom>\n        Menge\n      </Typography>\n      <Slider\n        aria-labelledby=\"amount-slider\"\n        valueLabelDisplay=\"auto\"\n        marks\n        min={4}\n        max={20}\n        value={activePlant.amount || 8}\n        onChange={(_event, newValue) => { transformPlant(activePlant, 'amount', newValue) }}\n      />\n      <Typography id=\"rotation-slider\" gutterBottom>\n        Größe\n      </Typography>\n      <Slider\n        aria-labelledby=\"scale-slider\"\n        valueLabelDisplay=\"auto\"\n        marks\n        min={0.1}\n        step={0.1}\n        max={2}\n        value={activePlant.scale || 1}\n        onChange={(_event, newValue) => { transformPlant(activePlant, 'scale', newValue) }}\n      />\n      </Box>\n    </Grid>\n    );\n\n  return (\n    <SwipeableDrawer\n      anchor=\"right\"\n      open={isOpen}\n      onClose={toggleDrawer(false)}\n      onOpen={toggleDrawer(true)}\n    >\n      {selectedPlant}\n    </SwipeableDrawer>\n  );\n}\n","import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Avatar, Grid } from '@material-ui/core';\nimport AvatarGroup from '@material-ui/lab/AvatarGroup';\nimport { IPlant } from '../plant/Plant';\nimport Drawer from '../drawer/Drawer';\n\ninterface IFooterProps {\n  selectedPlants: IPlant[],\n  activePlant: IPlant,\n  setActivePlant: any,\n  transformPlant: any\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    footer: {\n      padding: theme.spacing(2),\n      backgroundColor: theme.palette.primary.main,\n    },\n    avatar: {\n      width: theme.spacing(8),\n      height: theme.spacing(8),\n      borderColor: theme.palette.secondary.main,\n      cursor: 'pointer'\n    }\n  }),\n);\n\nexport default function Footer({selectedPlants, activePlant, setActivePlant, transformPlant}: IFooterProps) {\n  const classes = useStyles();\n\n  //TODO: Use plant.order for avatar count\n  const avatarCount = 5;\n  const avatars = selectedPlants.slice(0, avatarCount).map(plant =>\n    <Avatar\n      key={plant.name}\n      alt={plant.name}\n      src={`${process.env.PUBLIC_URL}/assets/${plant.source}`}\n      className={classes.avatar}\n      onClick={() => setActivePlant(plant)}\n    />);\n\n  return (\n    <footer className={classes.footer}>\n      <Grid container spacing={2} justify=\"center\">\n        <AvatarGroup max={5}>\n          {avatars}\n        </AvatarGroup>\n        {activePlant && <Drawer\n          activePlant={activePlant}\n          setActivePlant={setActivePlant}\n          transformPlant={transformPlant}\n        />}\n      </Grid>\n    </footer>\n  );\n}\n","import React, { Component } from 'react';\nimport Header from '../app-header/Header';\nimport Main from '../app-main/Main';\nimport Footer from '../app-footer/Footer';\nimport './Plantala.css';\nimport { plantItems } from '../plantItems';\nimport { IPlant } from '../plant/Plant';\n\nexport enum Action {\n  Start = \"Start\",\n  Select = \"Select\",\n  Done = \"Done\",\n  Again = \"Again\"\n}\n\nfunction* getNextAction(): IterableIterator<Action> {\n  let current = Action.Start;\n  while (true) {\n    yield current;\n    yield Action.Select;\n    yield Action.Done;\n    yield Action.Again;\n  }\n}\n\nconst nextAction = getNextAction();\nnextAction.next();\n\ninterface IPlantalaState {\n  plants: IPlant[],\n  selectedPlants: IPlant[],\n  activePlant: IPlant,\n  action: Action\n}\n\nclass Plantala extends Component {\n  state: IPlantalaState = {\n    // values to be displayed in <Card />\n    plants: plantItems,\n    // active plant for <Plant />\n    selectedPlants: [],\n    // active plant for <Plant />\n    activePlant: {} as IPlant,\n    // action mode to be displayed in <Main />\n    action: Action.Start,\n  }\n\n  setAction = () => {\n    this.setState({action: nextAction.next().value});\n  }\n\n  selectedPlants = (selectedPlant:IPlant) => {\n    const selectedPlantsArray =\n      this.state.plants.map(plant => plant === selectedPlant ? { ...plant, selected: !plant.selected } : plant);\n    this.setState({ plants: selectedPlantsArray });\n  }\n\n  activatedPlants = (activePlant: IPlant) => {\n    const activatedPlantsArray =\n      this.state.plants.map(plant => plant === activePlant ? { ...plant, active: !plant.active } : { ...plant, active: false });  \n    this.setState({ plants: activatedPlantsArray });\n  }\n\n  transformPlant = (transformedPlant: IPlant, transformName:string, newValue:number) => {\n    const filteredArray =\n      this.state.plants.map(plant => plant === transformedPlant ? { ...plant, [transformName]: newValue } : plant);\n    this.setState({ plants: filteredArray });\n  }\n\n  render = () => {\n    const { plants, action } = this.state;\n    const selectedPlants = plants.filter((plant) => (plant.selected === true));\n    const activePlant = plants.filter((plant) => (plant.active === true))[0];\n\n    return (\n      <div className=\"plantala\">\n        <Header />\n        <Main\n          plants={plants}\n          selectedPlants={selectedPlants}\n          action={action}\n          setAction={this.setAction}\n          setSelectedPlant={this.selectedPlants} />\n        <Footer\n          selectedPlants={selectedPlants}\n          activePlant={activePlant}\n          setActivePlant={this.activatedPlants}\n          transformPlant={this.transformPlant}\n           />\n      </div>\n    );\n  }\n}\n\nexport default Plantala;\n","export const plantItems = [\n  {name:'Gummiakazie',source:'Acacia_Senegal_Gummiakazie_Ausschnitt_Bunt.png', selected: false},\n  {name:'Ananas',source:'Ananas_sativus_Schult. _Ananas_Ausschnitt_Bunt.png', selected: false},\n  {name:'Mohrenhirse',source:'Andropogon_Sorghum_Brotero_var._Durrha._Mohrenhirse_Ausschnitt_Bunt.png', description: 'Andropogon Sorghum Brotero', selected: false},\n  {name:'Erdnuss',source:'Arachis_hypogaea_Linné_Erdnuss_Ausschnitt_Bunt.png', selected: false},\n  {name:'Erdnuss Indischer Sesam',source:'Arachis_hypogaea,_Sesamum_indicum,_Sesamum_orientale_Erdnuss_Indischer_Sesam_Weißer_Sesam_Ausschnitt_Bunt.png', selected: false},\n  {name:'Traganthstrauch',source:'Astragalus_creticus_Lam. _Cretischer_Traganthstrauch_Ausschnitt_Bunt.png', selected: false},\n  {name:'Gemeines Bambusrohr',source:'Bambusa_arundinacea_Willd. _Gemeines_Bambusrohr_Ausschnitt_Bunt.png', selected: false},\n  {name:'Butterbaum',source:'Butyrospermum_Parkii_Kotschy,_Illipe_latifolia_Engler_Afrikanischer_Butterbaum,_Mahwabaum_Ausschnitt_Bunt.png', selected: false},\n  {name:'Spanischer Pfeffer',source:'Capsicum_longum_DC. _Spanischer_Pfeffer_Ausschnitt_Bunt.png', selected: false},\n  {name:'Spanischer Pfeffer II',source:'Capsicum_longum_DC._Spanischer_Pfeffer_Ausschnitt_Bunt.png', selected: false},\n  {name:'Papaya',source:'Carica_Papaya_Linné_Melonenbaum_Ausschnitt_Bunt.png', selected: false},\n  {name:'Edelkastanie',source:'Castanea_vulgaris_Edelkastanie_Ausschnitt_Bunt.png', selected: false},\n  {name:'Fieberrindenbaum',source:'Cinchona_Calisaya_var_ Josephiana_Weddell_Fieberrindenbaum_Ausschnitt_Bunt.png', selected: false},\n  {name:'Kampferbaum',source:'Cinnamomum_Camphora_Nees_et_Eberm._Kampferbaum_Ausschnitt_bunt.png', selected: false},\n  {name:'Kolabaum',source:'Cola_acuminata_R._Brown_Kolabaum_Ausschnitt_bunt.png', selected: false},\n  {name:'Eingerollte Farnpalme II',source:'Cycas_circinalis_Linné_Eingerollte_Farnpalme_2tes_Teil_Ausschnitt_Bunt.png', selected: false},\n  {name:'Eingerollte Farnpalme',source:'Cycas_circinalis_Linné_Eingerollte_Farnpalme_Ausschnitt_Bunt.png', selected: false},\n  {name:'Ebenholzbaum',source:'Diospyros_Dalechamps_Ebenholzbaum_Ausschnitt_Bunt.png', selected: false},\n  {name:'Echter Muskatnussbaum',source:'Echter_Muskatnussbaum_Ausschnitt_Bunt.png', selected: false},\n  {name:'Afrikanische Ölpalme',source:'Elaeis_guineensis_Linné_Afrikanische_Ölpalme_Ausschnitt_Bunt.png', selected: false},\n  {name:'Kardamompflanze',source:'Elettaria_cardamomum_White_Echte_Kardamompflanze_Ausschnitt_Bunt.png', selected: false},\n  {name:'Kardamom',source:'Elettaria_Cardamomum_White_et_Maton_Malobar_Cardamome_Ausschnitt_Bunt.png', selected: false},\n  {name:'Echter Gummiguttbaum',source:'Garcinia_Hanburyi_Hooker_L._Echter_Gummiguttbaum_Ausschnitt_Bunt.png', selected: false},\n  {name:'Kampecheholzbaum',source:'Haematoxylon_campecheanum_Linne_Kampecheholzbaum_Ausschnitt_Bunt.png', selected: false},\n  {name:'Amerikanischer Kopalbaum',source:'Hymenaea_Courbaril_L._Amerikanischer_Kopalbaum_Lokustbaum_Ausschnitt_Bunt.png', selected: false},\n  {name:'Amerikanischer Kopalbaum II',source:'Hymenaea_Courbaril_L._Amerikanischer_Kopalbaum_Lokustbaum_Teil2_Ausschnitt_Bunt.png', selected: false},\n  {name:'Amerikanischer Kopalbaum III',source:'Hymenaea_Courbaril_L._Amerikanischer_Kopalbaum_Lokustbaum_Teil3_Ausschnitt_Bunt.png', selected: false},\n  {name:'Paraguay Theestrauch',source:'Ilex_paraguariensis_St._Hilaire_Mate-Pflanze,_Paraguay_Theestrauch_Ausschnitt_Bunt.png', selected: false},\n  {name:'Indigopflanze',source:'Indigofera_tinctoria_Indigopflanze_Ausschnitt_Bunt.png', selected: false},\n  {name:'Gemeiner Walnussbaum',source:'Juglans_regia_Gemeiner_Walnussbaum_Ausschnitt_Bunt.png', selected: false},\n  {name:'Gemeiner Walnussbaum II',source:'Juglans_regia_Gemeiner_Walnussbaum_Teil2_Ausschnitt_Bunt.png', selected: false},\n  {name:'Schönblühende Kautschukliane',source:'Landolphia_comorensis,_var._florida_K._Schumann _Schönblühende_Kautschukliane_Ausschnitt_Bunt.png', selected: false},\n  {name:'Schönblühende Kautschukliane II',source:'Landolphia_comorensis,_var._florida_K._Schumann _Schönblühende_Kautschukliane_Teil2_Ausschnitt_Bunt.png', selected: false},\n  {name:'Schönblühende Kautschukliane III',source:'Landolphia_comorensis,_var._florida_K._Schumann _Schönblühende_Kautschukliane_Teil3_Ausschnitt_Bunt.png', selected: false},\n  {name:'Maniokstrauch',source:'Manihot_utilissima_Pohl_Maniok-_oder_Cassavestrauch_Ausschnitt_Bunt.png', selected: false},\n  {name:'Pfeilwurz',source:'Maranta_arundinacea_L. _Pfeilwurz_Ausschnitt_Bunt.png', selected: false},\n  {name:'Pfeilwurz II',source:'Maranta_arundinacea_L. _Pfeilwurz_Teil2_Ausschnitt_Bunt.png', selected: false},\n  {name:'Pfeilwurz III',source:'Maranta_arundinacea_L. _Pfeilwurz_Teil3_Ausschnitt_Bunt.png', selected: false},\n  {name:'Muskatnussbaum',source:'Myristica_fragrans_Houttuyn_Muskatnussbaum_Ausschnitt_Bunt.png', selected: false},\n  {name:'Muskatnussbaum II',source:'Myristica_fragrans_Houttuyn_Muskatnussbaum_Teil2_Ausschnitt_Bunt.png', selected: false},\n  {name:'Neuseeländischer Flachs',source:'Phormium_tenax,_Agave_americana_Neuseeländischer_Flachs_Amerikanische_Agave_Ausschnitt_Bunt.png', selected: false},\n  {name:'Indischer Sesam',source:'Sesamum_indicum_Linné_Sesamum_orientale_Linné_Indischer_Sesam_Weisser_Sesam_Ausschnitt_Bunt.png', selected: false},\n  {name:'Indischer Sesam II',source:'Sesamum_indicum_Linné_Sesamum_orientale_Linné_Indischer_Sesam_Weisser_Sesam_Teil2_Ausschnitt_Bunt.png', selected: false},\n  {name:'Brechnussbaum',source:'Strychnos_nux_vomica_L._Brechnussbaum_Ausschnitt_Bunt.png', selected: false},\n  {name:'Amerikanischer Mahagonibaum',source:'Swietenia_Mahagoni_L._Amerikanischer_Mahagonibaum_Ausschnitt_Bunt.png', selected: false},\n  {name:'Theestrauch',source:'Thea_chinensis_Linné_Theestrauch_Ausschnitt_Bunt.png', selected: false},\n  {name:'Kakaobaum',source:'Theobroma_Cacao_Linné_Kakaobaum_Ausschnitt_Bunt.png', selected: false},\n  {name:'Vanille',source:'Vanilla_planifolia_Andrews_Vanille_Ausschnitt_Bunt.png', selected: false},\n  {name:'Echter Ingwer',source:'Zingiber_officinale_Roscoe_Echter_Ingwer_Ausschnitt_Bunt.png', selected: false},\n  {name:'Echter Ingwer II',source:'Zingiber_officinale_Roscoe_Echter_Ingwer_Teil2_Ausschnitt_Bunt.png', selected: false}\n  \n]\n\nexport default plantItems;\n","import React from 'react';\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { theme } from '../theme';\nimport Plantala from '../app-plantala/Plantala';\n\nconst App = () =>  \n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <Plantala />\n  </ThemeProvider>\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}